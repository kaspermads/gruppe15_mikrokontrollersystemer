
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00804000  0000021a  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080401e  0080401e  000002cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000035c8  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f9a  00000000  00000000  0000394c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f6  00000000  00000000  000068e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00006ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c0  00000000  00000000  00006e64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00008724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00008854  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ea e1       	ldi	r30, 0x1A	; 26
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ae 31       	cpi	r26, 0x1E	; 30
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ae e1       	ldi	r26, 0x1E	; 30
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a4 32       	cpi	r26, 0x24	; 36
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 be 00 	call	0x17c	; 0x17c <main>
 12e:	0c 94 0b 01 	jmp	0x216	; 0x216 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <USART3_init>:
{
	for(size_t i = 0; i < strlen(str); i++)
	{
		USART3_sendChar(str[i]);
	}
}
 136:	e0 e2       	ldi	r30, 0x20	; 32
 138:	f4 e0       	ldi	r31, 0x04	; 4
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	81 83       	std	Z+1, r24	; 0x01
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	82 83       	std	Z+2, r24	; 0x02
 142:	e0 e6       	ldi	r30, 0x60	; 96
 144:	f8 e0       	ldi	r31, 0x08	; 8
 146:	83 e8       	ldi	r24, 0x83	; 131
 148:	96 e0       	ldi	r25, 0x06	; 6
 14a:	80 87       	std	Z+8, r24	; 0x08
 14c:	91 87       	std	Z+9, r25	; 0x09
 14e:	86 81       	ldd	r24, Z+6	; 0x06
 150:	80 6c       	ori	r24, 0xC0	; 192
 152:	86 83       	std	Z+6, r24	; 0x06
 154:	08 95       	ret

00000156 <USART3_sendChar>:
 156:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 15a:	95 ff       	sbrs	r25, 5
 15c:	fc cf       	rjmp	.-8      	; 0x156 <USART3_sendChar>
 15e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 162:	08 95       	ret

00000164 <USART3_printChar>:
 164:	0e 94 ab 00 	call	0x156	; 0x156 <USART3_sendChar>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret

0000016e <USART3_read>:

uint8_t USART3_read()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
 16e:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 172:	88 23       	and	r24, r24
 174:	e4 f7       	brge	.-8      	; 0x16e <USART3_read>
	{
		;
	}
	return USART1.RXDATAL;
 176:	80 91 20 08 	lds	r24, 0x0820	; 0x800820 <__TEXT_REGION_LENGTH__+0x7e0820>
}
 17a:	08 95       	ret

0000017c <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8f e0       	ldi	r24, 0x0F	; 15
 17e:	97 e2       	ldi	r25, 0x27	; 39
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <main+0x4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0xa>
 186:	00 00       	nop

int main(void)
{
	_delay_ms(10);
	static FILE USART_stream = FDEV_SETUP_STREAM(USART3_printChar, NULL, _FDEV_SETUP_WRITE);
	stdout = &USART_stream;
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e4       	ldi	r25, 0x40	; 64
 18c:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <__data_end+0x2>
 190:	90 93 21 40 	sts	0x4021, r25	; 0x804021 <__data_end+0x3>
	//char command[MAX_COMMAND_LEN];
	uint8_t index = 0;
	char c;
	
	USART3_init();
 194:	0e 94 9b 00 	call	0x136	; 0x136 <USART3_init>
	printf("Control panel \r\n");
 198:	8e e0       	ldi	r24, 0x0E	; 14
 19a:	90 e4       	ldi	r25, 0x40	; 64
 19c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <puts>
	
	while (1)
	{
		

		c = USART3_read();
 1a0:	0e 94 b7 00 	call	0x16e	; 0x16e <USART3_read>
	
	
	do
	{
		;
		} while (!( USART3.STATUS & USART_RXCIF_bm ) ); /* Waiting for RX to
 1a4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 1a8:	88 23       	and	r24, r24
 1aa:	e4 f7       	brge	.-8      	; 0x1a4 <main+0x28>
		finish */
		USART3.TXDATAL = USART3.RXDATAL ; /* Send received byte */
 1ac:	e0 e6       	ldi	r30, 0x60	; 96
 1ae:	f8 e0       	ldi	r31, 0x08	; 8
 1b0:	80 81       	ld	r24, Z
 1b2:	82 83       	std	Z+2, r24	; 0x02
	}
 1b4:	f5 cf       	rjmp	.-22     	; 0x1a0 <main+0x24>

000001b6 <puts>:
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	e0 91 20 40 	lds	r30, 0x4020	; 0x804020 <__data_end+0x2>
 1c2:	f0 91 21 40 	lds	r31, 0x4021	; 0x804021 <__data_end+0x3>
 1c6:	23 81       	ldd	r18, Z+3	; 0x03
 1c8:	21 ff       	sbrs	r18, 1
 1ca:	1b c0       	rjmp	.+54     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1cc:	8c 01       	movw	r16, r24
 1ce:	d0 e0       	ldi	r29, 0x00	; 0
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	f8 01       	movw	r30, r16
 1d4:	81 91       	ld	r24, Z+
 1d6:	8f 01       	movw	r16, r30
 1d8:	60 91 20 40 	lds	r22, 0x4020	; 0x804020 <__data_end+0x2>
 1dc:	70 91 21 40 	lds	r23, 0x4021	; 0x804021 <__data_end+0x3>
 1e0:	db 01       	movw	r26, r22
 1e2:	18 96       	adiw	r26, 0x08	; 8
 1e4:	ed 91       	ld	r30, X+
 1e6:	fc 91       	ld	r31, X
 1e8:	19 97       	sbiw	r26, 0x09	; 9
 1ea:	88 23       	and	r24, r24
 1ec:	31 f0       	breq	.+12     	; 0x1fa <puts+0x44>
 1ee:	09 95       	icall
 1f0:	89 2b       	or	r24, r25
 1f2:	79 f3       	breq	.-34     	; 0x1d2 <puts+0x1c>
 1f4:	df ef       	ldi	r29, 0xFF	; 255
 1f6:	cf ef       	ldi	r28, 0xFF	; 255
 1f8:	ec cf       	rjmp	.-40     	; 0x1d2 <puts+0x1c>
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	09 95       	icall
 1fe:	89 2b       	or	r24, r25
 200:	19 f0       	breq	.+6      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	02 c0       	rjmp	.+4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 208:	8d 2f       	mov	r24, r29
 20a:	9c 2f       	mov	r25, r28
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	1f 91       	pop	r17
 212:	0f 91       	pop	r16
 214:	08 95       	ret

00000216 <_exit>:
 216:	f8 94       	cli

00000218 <__stop_program>:
 218:	ff cf       	rjmp	.-2      	; 0x218 <__stop_program>
