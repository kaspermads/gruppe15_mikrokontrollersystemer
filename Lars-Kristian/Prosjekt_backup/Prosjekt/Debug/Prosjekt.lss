
Prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e8  00804000  00000f3a  00000fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008040e8  008040e8  000010b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005154  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003025  00000000  00000000  00006360  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a4  00000000  00000000  00009385  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  00009b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003cf0  00000000  00000000  00009e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  0000db38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000e3b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_6>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_14>
  3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_15>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ea e3       	ldi	r30, 0x3A	; 58
 108:	ff e0       	ldi	r31, 0x0F	; 15
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a8 3e       	cpi	r26, 0xE8	; 232
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a8 ee       	ldi	r26, 0xE8	; 232
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a4 3f       	cpi	r26, 0xF4	; 244
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <main>
 12e:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <USART3_printChar>:
	USART3.CTRLB |= USART_TXEN_bm;	// Aktiverer USART3-senderen i kontrollregister B med bitmasken til TX
}
void USART3_printChar(char c, FILE *stream)
{
	// Sjekker om bufferet er tomt før ny sending
	while (!(USART3.STATUS & USART_DREIF_bm))
 136:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <USART3_printChar>
	{
		;
	}
	USART3.TXDATAL = c;	// Sender en karakter
 13e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 142:	08 95       	ret

00000144 <TCA0_init>:


void TCA0_init(void)
{
	// PORTD pins for output PWM-signals.
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN4_bm | PIN3_bm;
 144:	8b e1       	ldi	r24, 0x1B	; 27
 146:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
	
	//set waveform output on PORT D
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
	
	// enable compare channel 0, 1 and set single-slope PWM mode
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	fa e0       	ldi	r31, 0x0A	; 10
 154:	83 e3       	ldi	r24, 0x33	; 51
 156:	81 83       	std	Z+1, r24	; 0x01
	
	 // enable split mode
    TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm; 
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	93 83       	std	Z+3, r25	; 0x03
	
	// enable compare channel 0 for the higher byte, enable compare channel 0 for the lower byte
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_LCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_LCMP1EN_bm;    
 15c:	81 83       	std	Z+1, r24	; 0x01
	
	
	// L0 = PIN0, L1=PIN1, H0=PIN3, H1=PIN4
	// set the PWM frequencies and duty cycles
    TCA0.SPLIT.LPER = PERIOD_FREQUENCY;                          
 15e:	87 e2       	ldi	r24, 0x27	; 39
 160:	86 a3       	std	Z+38, r24	; 0x26
    TCA0.SPLIT.LCMP0 = DUTY_CYCLE_MIN_VALUE;                           
 162:	10 a6       	std	Z+40, r1	; 0x28
    TCA0.SPLIT.HPER = PERIOD_FREQUENCY;                             
 164:	87 a3       	std	Z+39, r24	; 0x27
    TCA0.SPLIT.HCMP0 = DUTY_CYCLE_MIN_VALUE;
 166:	11 a6       	std	Z+41, r1	; 0x29
	
	//TCA0.SPLIT.LPER = PERIOD_FREQUENCY;                          
    TCA0.SPLIT.LCMP1 = DUTY_CYCLE_MIN_VALUE;                           
 168:	12 a6       	std	Z+42, r1	; 0x2a
    //TCA0.SPLIT.HPER = PERIOD_FREQUENCY;                             
    TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MIN_VALUE; 
 16a:	13 a6       	std	Z+43, r1	; 0x2b
	
	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV4_gc | TCA_SPLIT_ENABLE_bm;   // set clock source (sys_clk/4), and start timer         
 16c:	85 e0       	ldi	r24, 0x05	; 5
 16e:	80 83       	st	Z, r24
 170:	08 95       	ret

00000172 <TCB0_init>:
}


void TCB0_init(void)
{
	PORTB.DIR &= ~PIN4_bm;
 172:	e0 e2       	ldi	r30, 0x20	; 32
 174:	f4 e0       	ldi	r31, 0x04	; 4
 176:	80 81       	ld	r24, Z
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	80 83       	st	Z, r24
	PORTB.PIN4CTRL |= PORT_PULLUPEN_bm;
 17c:	84 89       	ldd	r24, Z+20	; 0x14
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	84 8b       	std	Z+20, r24	; 0x14
	
	TCB0.CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;	// enable timer/counter TCB0 and use clock from TCA0
 182:	e0 e0       	ldi	r30, 0x00	; 0
 184:	fb e0       	ldi	r31, 0x0B	; 11
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	80 83       	st	Z, r24
	TCB0.CTRLB = TCB_CNTMODE_PW_gc;	// set timer mod to input capture frequency and PWM measurement mode
 18a:	84 e0       	ldi	r24, 0x04	; 4
 18c:	81 83       	std	Z+1, r24	; 0x01
	
	TCB0.INTCTRL = TCB_CAPT_bm; // interrupt enabled for capture
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	85 83       	std	Z+5, r24	; 0x05
	
	TCB0.EVCTRL = TCB_CAPTEI_bm | TCB_FILTER_bm; // Capture event input enable
 192:	91 e4       	ldi	r25, 0x41	; 65
 194:	94 83       	std	Z+4, r25	; 0x04
	
	//EVSYS.SWEVENTA = EVSYS_SWEVENTA0_bm;
	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTB_PIN4_gc; //	input event channel 0, port b on pin 4
 196:	e0 e0       	ldi	r30, 0x00	; 0
 198:	f2 e0       	ldi	r31, 0x02	; 2
 19a:	9c e4       	ldi	r25, 0x4C	; 76
 19c:	90 8b       	std	Z+16, r25	; 0x10
	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; // connects channel 0(portb pin0????) specific to TCB0 input capture mode
 19e:	86 af       	std	Z+62, r24	; 0x3e
 1a0:	08 95       	ret

000001a2 <TCB1_init>:
}


void TCB1_init(void)
{
	PORTB.DIR &= ~PIN5_bm;
 1a2:	e0 e2       	ldi	r30, 0x20	; 32
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	80 83       	st	Z, r24
	PORTB.PIN5CTRL |= PORT_PULLUPEN_bm;
 1ac:	85 89       	ldd	r24, Z+21	; 0x15
 1ae:	88 60       	ori	r24, 0x08	; 8
 1b0:	85 8b       	std	Z+21, r24	; 0x15
	
	
	TCB1.CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;	// enable timer/counter TCB0 and use clock from TCA0
 1b2:	e0 e1       	ldi	r30, 0x10	; 16
 1b4:	fb e0       	ldi	r31, 0x0B	; 11
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	80 83       	st	Z, r24
	TCB1.CTRLB = TCB_CNTMODE_PW_gc;	// set timer mod to input capture frequency and PWM measurement mode
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	81 83       	std	Z+1, r24	; 0x01
	
	TCB1.INTCTRL = TCB_CAPT_bm; // interrupt enabled for capture
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	85 83       	std	Z+5, r24	; 0x05
	
	TCB1.EVCTRL = TCB_CAPTEI_bm | TCB_FILTER_bm ; // Capture event input enable
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	84 83       	std	Z+4, r24	; 0x04
	
	//EVSYS.SWEVENTA = EVSYS_SWEVENTA0_bm;
	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_PORTB_PIN5_gc; //	input event channel 1, port b on pin 5
 1c6:	8d e4       	ldi	r24, 0x4D	; 77
 1c8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__TEXT_REGION_LENGTH__+0x7e0211>
	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; // connects channel 0(portb pin0????) specific to TCB0 input capture mode
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>
 1d2:	08 95       	ret

000001d4 <ADC0_init>:
bool ADC0_conersionDone(void);

void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
 1d4:	e0 e6       	ldi	r30, 0x60	; 96
 1d6:	f4 e0       	ldi	r31, 0x04	; 4
 1d8:	86 89       	ldd	r24, Z+22	; 0x16
 1da:	88 7f       	andi	r24, 0xF8	; 248
 1dc:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
 1de:	86 89       	ldd	r24, Z+22	; 0x16
 1e0:	84 60       	ori	r24, 0x04	; 4
 1e2:	86 8b       	std	Z+22, r24	; 0x16

	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
 1e4:	86 89       	ldd	r24, Z+22	; 0x16
 1e6:	87 7f       	andi	r24, 0xF7	; 247
 1e8:	86 8b       	std	Z+22, r24	; 0x16

	ADC0.CTRLC = ADC_PRESC_DIV4_gc; /* CLK_PER divided by 4 */
 1ea:	e0 e0       	ldi	r30, 0x00	; 0
 1ec:	f6 e0       	ldi	r31, 0x06	; 6
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	82 83       	std	Z+2, r24	; 0x02
	
	VREF.ADC0REF = VREF_REFSEL_VDD_gc ; /* VDD as reference */
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc; /* 10-bit mode */
 1f8:	80 83       	st	Z, r24

	/* Select ADC channel */
	ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 87       	std	Z+8, r24	; 0x08

	/* Enable FreeRun mode */
	ADC0.CTRLA |= ADC_FREERUN_bm;
 1fe:	80 81       	ld	r24, Z
 200:	82 60       	ori	r24, 0x02	; 2
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <ADC0_read>:
}
uint16_t ADC0_read(void)
{
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
 206:	e0 e0       	ldi	r30, 0x00	; 0
 208:	f6 e0       	ldi	r31, 0x06	; 6
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	85 87       	std	Z+13, r24	; 0x0d

	return ADC0.RES;
 20e:	80 89       	ldd	r24, Z+16	; 0x10
 210:	91 89       	ldd	r25, Z+17	; 0x11
}
 212:	08 95       	ret

00000214 <ADC0_start>:
void ADC0_start(void)
{
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
 21a:	08 95       	ret

0000021c <ADC0_conersionDone>:
}
bool ADC0_conersionDone(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
 21c:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
}
 220:	81 70       	andi	r24, 0x01	; 1
 222:	08 95       	ret

00000224 <file_stream>:

void file_stream(void)
{
	// Lager en egendefinert output stream som skal håndteres av funksjonen USART3_printChar
	static FILE USART3_stream = FDEV_SETUP_STREAM(USART3_printChar, NULL, _FDEV_SETUP_WRITE);
	stdout = &USART3_stream;	// Erstatter standard output stream med den egen definerte
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	90 e4       	ldi	r25, 0x40	; 64
 228:	80 93 f0 40 	sts	0x40F0, r24	; 0x8040f0 <__iob+0x2>
 22c:	90 93 f1 40 	sts	0x40F1, r25	; 0x8040f1 <__iob+0x3>
 230:	08 95       	ret

00000232 <USART3_init>:
}

void USART3_init(void)
{
	// RX input and TX output
	PORTB.DIR &= ~PIN1_bm;
 232:	e0 e2       	ldi	r30, 0x20	; 32
 234:	f4 e0       	ldi	r31, 0x04	; 4
 236:	80 81       	ld	r24, Z
 238:	8d 7f       	andi	r24, 0xFD	; 253
 23a:	80 83       	st	Z, r24
	PORTB.DIR |= PIN0_bm;
 23c:	80 81       	ld	r24, Z
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	80 83       	st	Z, r24

	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600);	// Baud rate for USART3
 242:	e0 e6       	ldi	r30, 0x60	; 96
 244:	f8 e0       	ldi	r31, 0x08	; 8
 246:	83 e8       	ldi	r24, 0x83	; 131
 248:	96 e0       	ldi	r25, 0x06	; 6
 24a:	80 87       	std	Z+8, r24	; 0x08
 24c:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;	// Aktiverer USART3-senderen i kontrollregister B med bitmasken til TX
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	80 64       	ori	r24, 0x40	; 64
 252:	86 83       	std	Z+6, r24	; 0x06
 254:	08 95       	ret

00000256 <RTC_init>:


void RTC_init(void)
{
	// Enables the source clock for the RTC counter
	RTC.CTRLA = RTC_RTCEN_bm | RTC_PRESCALER_DIV1_gc; // Enable RTC, select presaler
 256:	e0 e4       	ldi	r30, 0x40	; 64
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 83       	st	Z, r24
	//RTC.INTCTRL = RTC_OVF_bm;
	RTC.CLKSEL = RTC_CLKSEL_OSC1K_gc; // Select source for the RTC clock
 25e:	87 83       	std	Z+7, r24	; 0x07
	
	// Enables the PIT (Periodic Interrupt Timer)
	RTC.PITCTRLA = RTC_PITEN_bm | RTC_PERIOD_CYC1024_gc; // Enable PIT and select number of clock cycles between interrupt
 260:	99 e4       	ldi	r25, 0x49	; 73
 262:	90 8b       	std	Z+16, r25	; 0x10
	RTC.PITINTCTRL = RTC_PI_bm;	// Enable interrupt
 264:	82 8b       	std	Z+18, r24	; 0x12
 266:	08 95       	ret

00000268 <__vector_6>:
}

// RTC interrupt
ISR(RTC_PIT_vect)
{
 268:	1f 92       	push	r1
 26a:	0f 92       	push	r0
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	0f 92       	push	r0
 270:	11 24       	eor	r1, r1
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
	counter ++; // Counter represent seconds
 276:	80 91 ec 40 	lds	r24, 0x40EC	; 0x8040ec <counter>
 27a:	90 91 ed 40 	lds	r25, 0x40ED	; 0x8040ed <counter+0x1>
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	80 93 ec 40 	sts	0x40EC, r24	; 0x8040ec <counter>
 284:	90 93 ed 40 	sts	0x40ED, r25	; 0x8040ed <counter+0x1>
	RTC.PITINTFLAGS = RTC_PI_bm; // Clears the interrupt flag
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7e0153>
}
 28e:	9f 91       	pop	r25
 290:	8f 91       	pop	r24
 292:	0f 90       	pop	r0
 294:	0f be       	out	0x3f, r0	; 63
 296:	0f 90       	pop	r0
 298:	1f 90       	pop	r1
 29a:	18 95       	reti

0000029c <PWM_freq_to_RPM>:
	}
}

uint16_t PWM_freq_to_RPM(uint16_t PWM_onperiode)
{
	return ((F_CPU * 60)/(4 * PRESCALER * PWM_onperiode));
 29c:	82 95       	swap	r24
 29e:	92 95       	swap	r25
 2a0:	90 7f       	andi	r25, 0xF0	; 240
 2a2:	98 27       	eor	r25, r24
 2a4:	80 7f       	andi	r24, 0xF0	; 240
 2a6:	98 27       	eor	r25, r24
 2a8:	9c 01       	movw	r18, r24
 2aa:	40 e0       	ldi	r20, 0x00	; 0
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	7c e1       	ldi	r23, 0x1C	; 28
 2b2:	8e e4       	ldi	r24, 0x4E	; 78
 2b4:	9e e0       	ldi	r25, 0x0E	; 14
 2b6:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodsi4>
}
 2ba:	c9 01       	movw	r24, r18
 2bc:	08 95       	ret

000002be <__vector_14>:
	counter ++; // Counter represent seconds
	RTC.PITINTFLAGS = RTC_PI_bm; // Clears the interrupt flag
}
// TCB0 interrupt function
ISR(TCB0_INT_vect)
{
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	0b b6       	in	r0, 0x3b	; 59
 2ca:	0f 92       	push	r0
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	//TCB0.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
	
	// DO SOMETHING, maybe read from TCB0.CCMP????
	//TCB0.CCMP // holds the compare, capture, and top value
	RPM_fan1= PWM_freq_to_RPM(TCB0.CCMP);
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	db e0       	ldi	r29, 0x0B	; 11
 2ec:	8c 85       	ldd	r24, Y+12	; 0x0c
 2ee:	9d 85       	ldd	r25, Y+13	; 0x0d
 2f0:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_freq_to_RPM>
 2f4:	80 93 e8 40 	sts	0x40E8, r24	; 0x8040e8 <__data_end>
 2f8:	90 93 e9 40 	sts	0x40E9, r25	; 0x8040e9 <__data_end+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	8e 83       	std	Y+6, r24	; 0x06
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0b be       	out	0x3b, r0	; 59
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <__vector_15>:

ISR(TCB1_INT_vect)
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	0b b6       	in	r0, 0x3b	; 59
 336:	0f 92       	push	r0
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	cf 93       	push	r28
 34e:	df 93       	push	r29
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
	//TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
	RPM_fan2= PWM_freq_to_RPM(TCB1.CCMP);
 354:	c0 e1       	ldi	r28, 0x10	; 16
 356:	db e0       	ldi	r29, 0x0B	; 11
 358:	8c 85       	ldd	r24, Y+12	; 0x0c
 35a:	9d 85       	ldd	r25, Y+13	; 0x0d
 35c:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_freq_to_RPM>
 360:	80 93 ea 40 	sts	0x40EA, r24	; 0x8040ea <RPM_fan2>
 364:	90 93 eb 40 	sts	0x40EB, r25	; 0x8040eb <RPM_fan2+0x1>
	TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	8e 83       	std	Y+6, r24	; 0x06
}
 36c:	ff 91       	pop	r31
 36e:	ef 91       	pop	r30
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	bf 91       	pop	r27
 376:	af 91       	pop	r26
 378:	9f 91       	pop	r25
 37a:	8f 91       	pop	r24
 37c:	7f 91       	pop	r23
 37e:	6f 91       	pop	r22
 380:	5f 91       	pop	r21
 382:	4f 91       	pop	r20
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0b be       	out	0x3b, r0	; 59
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <average_values_for_tach>:
	return ((F_CPU * 60)/(4 * PRESCALER * PWM_onperiode));
}

// Calculating average RPM at max fan speed
FanSpeeds average_values_for_tach()	
{
 396:	4f 92       	push	r4
 398:	5f 92       	push	r5
 39a:	6f 92       	push	r6
 39c:	7f 92       	push	r7
 39e:	8f 92       	push	r8
 3a0:	9f 92       	push	r9
 3a2:	af 92       	push	r10
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
	// SETT DETTE I IF MED FLAGG???
	
	// Set value to all fans
	TCA0.SPLIT.LCMP0 = DUTY_CYCLE_MAX_VALUE;
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	fa e0       	ldi	r31, 0x0A	; 10
 3ba:	87 e2       	ldi	r24, 0x27	; 39
 3bc:	80 a7       	std	Z+40, r24	; 0x28
	TCA0.SPLIT.LCMP1 = DUTY_CYCLE_MAX_VALUE;
 3be:	82 a7       	std	Z+42, r24	; 0x2a
	TCA0.SPLIT.HCMP0 = DUTY_CYCLE_MAX_VALUE;
 3c0:	81 a7       	std	Z+41, r24	; 0x29
	TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MAX_VALUE;
 3c2:	83 a7       	std	Z+43, r24	; 0x2b
	
	printf("Satt vifter! \r\n");
 3c4:	82 e1       	ldi	r24, 0x12	; 18
 3c6:	90 e4       	ldi	r25, 0x40	; 64
 3c8:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
	uint32_t sum_RPM_fan2 = 0;
	uint16_t average_read_value_fan1;
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
	uint16_t compare_counter_time = counter; // reset counter for compare
 3cc:	00 91 ec 40 	lds	r16, 0x40EC	; 0x8040ec <counter>
 3d0:	10 91 ed 40 	lds	r17, 0x40ED	; 0x8040ed <counter+0x1>
	uint32_t sum_RPM_fan1 = 0;
	uint32_t sum_RPM_fan2 = 0;
	uint16_t average_read_value_fan1;
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
 3d4:	c0 e0       	ldi	r28, 0x00	; 0
 3d6:	d0 e0       	ldi	r29, 0x00	; 0
	
	printf("Satt vifter! \r\n");
	
	// For average read values for two fans
	uint32_t sum_RPM_fan1 = 0;
	uint32_t sum_RPM_fan2 = 0;
 3d8:	81 2c       	mov	r8, r1
 3da:	91 2c       	mov	r9, r1
 3dc:	54 01       	movw	r10, r8
	TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MAX_VALUE;
	
	printf("Satt vifter! \r\n");
	
	// For average read values for two fans
	uint32_t sum_RPM_fan1 = 0;
 3de:	c1 2c       	mov	r12, r1
 3e0:	d1 2c       	mov	r13, r1
 3e2:	76 01       	movw	r14, r12
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
	uint16_t compare_counter_time = counter; // reset counter for compare
	
	while (counter - compare_counter_time <= 10) 
 3e4:	21 c0       	rjmp	.+66     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
	{
		sum_RPM_fan1 += RPM_fan1;
 3e6:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <__data_end>
 3ea:	90 91 e9 40 	lds	r25, 0x40E9	; 0x8040e9 <__data_end+0x1>
 3ee:	c8 0e       	add	r12, r24
 3f0:	d9 1e       	adc	r13, r25
 3f2:	e1 1c       	adc	r14, r1
 3f4:	f1 1c       	adc	r15, r1
		sum_RPM_fan2 += RPM_fan2;
 3f6:	80 91 ea 40 	lds	r24, 0x40EA	; 0x8040ea <RPM_fan2>
 3fa:	90 91 eb 40 	lds	r25, 0x40EB	; 0x8040eb <RPM_fan2+0x1>
 3fe:	88 0e       	add	r8, r24
 400:	99 1e       	adc	r9, r25
 402:	a1 1c       	adc	r10, r1
 404:	b1 1c       	adc	r11, r1
			
		printf("RPM fan 1: %d\r\n", RPM_fan1);
 406:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <__data_end>
 40a:	90 91 e9 40 	lds	r25, 0x40E9	; 0x8040e9 <__data_end+0x1>
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	81 e2       	ldi	r24, 0x21	; 33
 414:	90 e4       	ldi	r25, 0x40	; 64
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
		num_of_readings ++;
 41e:	21 96       	adiw	r28, 0x01	; 1
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
	uint16_t compare_counter_time = counter; // reset counter for compare
	
	while (counter - compare_counter_time <= 10) 
 428:	80 91 ec 40 	lds	r24, 0x40EC	; 0x8040ec <counter>
 42c:	90 91 ed 40 	lds	r25, 0x40ED	; 0x8040ed <counter+0x1>
 430:	80 1b       	sub	r24, r16
 432:	91 0b       	sbc	r25, r17
 434:	0b 97       	sbiw	r24, 0x0b	; 11
 436:	b8 f2       	brcs	.-82     	; 0x3e6 <average_values_for_tach+0x50>
			
		printf("RPM fan 1: %d\r\n", RPM_fan1);
		num_of_readings ++;
	}
	
	average_read_value_fan1 = sum_RPM_fan1 / num_of_readings;
 438:	2e 01       	movw	r4, r28
 43a:	61 2c       	mov	r6, r1
 43c:	71 2c       	mov	r7, r1
 43e:	c7 01       	movw	r24, r14
 440:	b6 01       	movw	r22, r12
 442:	a3 01       	movw	r20, r6
 444:	92 01       	movw	r18, r4
 446:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodsi4>
 44a:	69 01       	movw	r12, r18
 44c:	7a 01       	movw	r14, r20
	average_read_value_fan2 = sum_RPM_fan2 / num_of_readings;
 44e:	c5 01       	movw	r24, r10
 450:	b4 01       	movw	r22, r8
 452:	a3 01       	movw	r20, r6
 454:	92 01       	movw	r18, r4
 456:	0e 94 81 04 	call	0x902	; 0x902 <__udivmodsi4>
 45a:	49 01       	movw	r8, r18
 45c:	5a 01       	movw	r10, r20
	
 	printf("Number of readings: %d\r\n", num_of_readings);
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	81 e3       	ldi	r24, 0x31	; 49
 464:	90 e4       	ldi	r25, 0x40	; 64
 466:	9f 93       	push	r25
 468:	8f 93       	push	r24
 46a:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	
	FanSpeeds average_read_values;
	average_read_values.fan1 = average_read_value_fan1;
 46e:	b6 01       	movw	r22, r12
	average_read_values.fan2 = average_read_value_fan2;
 470:	c4 01       	movw	r24, r8
	
	return average_read_values;
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
}
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	7f 90       	pop	r7
 494:	6f 90       	pop	r6
 496:	5f 90       	pop	r5
 498:	4f 90       	pop	r4
 49a:	08 95       	ret

0000049c <alarm>:
}

uint8_t alarm(uint8_t percentage)
{

	if (percentage < 90)
 49c:	8a 35       	cpi	r24, 0x5A	; 90
 49e:	10 f4       	brcc	.+4      	; 0x4a4 <alarm+0x8>
	{
		return 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	08 95       	ret
	}
	else
	{
		return 0;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 4a6:	08 95       	ret

000004a8 <calculate_percentage>:

uint8_t calculate_percentage(uint16_t old_value, uint16_t current_value)
{
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	d8 2f       	mov	r29, r24
 4b2:	c9 2f       	mov	r28, r25
 4b4:	06 2f       	mov	r16, r22
 4b6:	17 2f       	mov	r17, r23
	printf("Gammel: %d\r\n", old_value);
 4b8:	9f 93       	push	r25
 4ba:	8f 93       	push	r24
 4bc:	8a e4       	ldi	r24, 0x4A	; 74
 4be:	90 e4       	ldi	r25, 0x40	; 64
 4c0:	9f 93       	push	r25
 4c2:	8f 93       	push	r24
 4c4:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	printf("Current: %d\r\n", current_value);
 4c8:	1f 93       	push	r17
 4ca:	0f 93       	push	r16
 4cc:	87 e5       	ldi	r24, 0x57	; 87
 4ce:	90 e4       	ldi	r25, 0x40	; 64
 4d0:	9f 93       	push	r25
 4d2:	8f 93       	push	r24
 4d4:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	
	return (current_value / old_value) * 100.0;
 4d8:	80 2f       	mov	r24, r16
 4da:	91 2f       	mov	r25, r17
 4dc:	6d 2f       	mov	r22, r29
 4de:	7c 2f       	mov	r23, r28
 4e0:	0e 94 6d 04 	call	0x8da	; 0x8da <__udivmodhi4>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 4ec:	20 e0       	ldi	r18, 0x00	; 0
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	48 ec       	ldi	r20, 0xC8	; 200
 4f2:	52 e4       	ldi	r21, 0x42	; 66
 4f4:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__mulsf3>
 4f8:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 4fc:	86 2f       	mov	r24, r22
 4fe:	2d b7       	in	r18, 0x3d	; 61
 500:	3e b7       	in	r19, 0x3e	; 62
 502:	28 5f       	subi	r18, 0xF8	; 248
 504:	3f 4f       	sbci	r19, 0xFF	; 255
 506:	2d bf       	out	0x3d, r18	; 61
 508:	3e bf       	out	0x3e, r19	; 62
}
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	1f 91       	pop	r17
 510:	0f 91       	pop	r16
 512:	08 95       	ret

00000514 <predict_error>:
	return average_read_values;
}

// Predicting failures with fans
void predict_error()
{
 514:	ef 92       	push	r14
 516:	ff 92       	push	r15
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
	
	
	// Local struct for current RPM speeds fan1 and fan2
	FanSpeeds current_RPM_values;
	// Call function to get the average fan speeds and save in variables
	current_RPM_values = average_values_for_tach();
 51e:	0e 94 cb 01 	call	0x396	; 0x396 <average_values_for_tach>
 522:	d6 2f       	mov	r29, r22
 524:	c7 2f       	mov	r28, r23
 526:	18 2f       	mov	r17, r24
 528:	f9 2e       	mov	r15, r25
	uint16_t current_RPM_value_fan1 = current_RPM_values.fan1;
	uint16_t current_RPM_value_fan2 = current_RPM_values.fan2;
	
	printf("Gjennomsnitt fan 1: %d\r\n", current_RPM_value_fan1);
 52a:	7f 93       	push	r23
 52c:	6f 93       	push	r22
 52e:	85 e6       	ldi	r24, 0x65	; 101
 530:	90 e4       	ldi	r25, 0x40	; 64
 532:	9f 93       	push	r25
 534:	8f 93       	push	r24
 536:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	printf("Gjennomsnitt fan 2: %d\r\n", current_RPM_value_fan2);
 53a:	ff 92       	push	r15
 53c:	1f 93       	push	r17
 53e:	8e e7       	ldi	r24, 0x7E	; 126
 540:	90 e4       	ldi	r25, 0x40	; 64
 542:	9f 93       	push	r25
 544:	8f 93       	push	r24
 546:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	printf("\r\n");
 54a:	86 ec       	ldi	r24, 0xC6	; 198
 54c:	90 e4       	ldi	r25, 0x40	; 64
 54e:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
	printf("\r\n");
 552:	86 ec       	ldi	r24, 0xC6	; 198
 554:	90 e4       	ldi	r25, 0x40	; 64
 556:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
	
	uint16_t  old_value_fan1 = new_fan_RPM_fan1;
	uint16_t  old_value_fan2 = new_fan_RPM_fan2;
 55a:	e0 90 0e 40 	lds	r14, 0x400E	; 0x80400e <new_fan_RPM_fan2>
 55e:	f0 90 0f 40 	lds	r15, 0x400F	; 0x80400f <new_fan_RPM_fan2+0x1>
	
	// Formula for prediction of error
	uint8_t percentage_to_compare_fan1 = calculate_percentage(old_value_fan1, current_RPM_value_fan1); // send old value and atm value
 562:	6d 2f       	mov	r22, r29
 564:	7c 2f       	mov	r23, r28
 566:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <new_fan_RPM_fan1>
 56a:	90 91 11 40 	lds	r25, 0x4011	; 0x804011 <new_fan_RPM_fan1+0x1>
 56e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <calculate_percentage>
 572:	18 2f       	mov	r17, r24
	uint8_t percentage_to_compare_fan2 = calculate_percentage(old_value_fan2, current_RPM_value_fan1); // send old value and atm value
 574:	6d 2f       	mov	r22, r29
 576:	7c 2f       	mov	r23, r28
 578:	c7 01       	movw	r24, r14
 57a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <calculate_percentage>
	
	printf("PROSENT fan 1: %d\r\n", percentage_to_compare_fan1);
 57e:	1f 92       	push	r1
 580:	1f 93       	push	r17
 582:	87 e9       	ldi	r24, 0x97	; 151
 584:	90 e4       	ldi	r25, 0x40	; 64
 586:	9f 93       	push	r25
 588:	8f 93       	push	r24
 58a:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	
	// Under 90% set of a alarm
	uint8_t fan1_status =  alarm(percentage_to_compare_fan1);
 58e:	81 2f       	mov	r24, r17
 590:	0e 94 4e 02 	call	0x49c	; 0x49c <alarm>
 594:	c8 2f       	mov	r28, r24
	uint8_t fan2_status = alarm(percentage_to_compare_fan2);
	printf("STATUS fan 1: %d\r\n", fan1_status);
 596:	1f 92       	push	r1
 598:	8f 93       	push	r24
 59a:	8b ea       	ldi	r24, 0xAB	; 171
 59c:	90 e4       	ldi	r25, 0x40	; 64
 59e:	9f 93       	push	r25
 5a0:	8f 93       	push	r24
 5a2:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
	
	if (fan1_status == 1)
 5a6:	8d b7       	in	r24, 0x3d	; 61
 5a8:	9e b7       	in	r25, 0x3e	; 62
 5aa:	40 96       	adiw	r24, 0x10	; 16
 5ac:	8d bf       	out	0x3d, r24	; 61
 5ae:	9e bf       	out	0x3e, r25	; 62
 5b0:	c1 30       	cpi	r28, 0x01	; 1
 5b2:	21 f4       	brne	.+8      	; 0x5bc <predict_error+0xa8>
	{
		// What alarm do we want?
		printf("ALARM!! \r\n");
 5b4:	8e eb       	ldi	r24, 0xBE	; 190
 5b6:	90 e4       	ldi	r25, 0x40	; 64
 5b8:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
// 	else if (percentage_to_compare_fan2 < 90)
// 	{
// 		//what alarm do we want?
// 	}

}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	ff 90       	pop	r15
 5c4:	ef 90       	pop	r14
 5c6:	08 95       	ret

000005c8 <main>:
	TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
}

int main(void)
{
	file_stream();  // Create file stream for USART
 5c8:	0e 94 12 01 	call	0x224	; 0x224 <file_stream>
	USART3_init();	// USART3 initialize
 5cc:	0e 94 19 01 	call	0x232	; 0x232 <USART3_init>
	
	// PWM initialize
	TCA0_init();
 5d0:	0e 94 a2 00 	call	0x144	; 0x144 <TCA0_init>
	TCB0_init();
 5d4:	0e 94 b9 00 	call	0x172	; 0x172 <TCB0_init>
	TCB1_init();
 5d8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TCB1_init>
	
	// ADC initialize
	ADC0_init();
 5dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ADC0_init>
	ADC0_start();
 5e0:	0e 94 0a 01 	call	0x214	; 0x214 <ADC0_start>
	
	// RTC initialize
	RTC_init();
 5e4:	0e 94 2b 01 	call	0x256	; 0x256 <RTC_init>
	
	sei(); // Enable Global Interrupts
 5e8:	78 94       	sei
	
	while (1)
	{
		if(counter == 20)
 5ea:	80 91 ec 40 	lds	r24, 0x40EC	; 0x8040ec <counter>
 5ee:	90 91 ed 40 	lds	r25, 0x40ED	; 0x8040ed <counter+0x1>
 5f2:	44 97       	sbiw	r24, 0x14	; 20
 5f4:	31 f4       	brne	.+12     	; 0x602 <main+0x3a>
		{
			predict_error();
 5f6:	0e 94 8a 02 	call	0x514	; 0x514 <predict_error>
			//average_values_for_tach();
			counter = 0;
 5fa:	10 92 ec 40 	sts	0x40EC, r1	; 0x8040ec <counter>
 5fe:	10 92 ed 40 	sts	0x40ED, r1	; 0x8040ed <counter+0x1>
		}
		if (ADC0_conersionDone())
 602:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC0_conersionDone>
 606:	88 23       	and	r24, r24
 608:	81 f3       	breq	.-32     	; 0x5ea <main+0x22>
		{
			// Read potentiometer
			uint16_t adc_value = ADC0_read();
 60a:	0e 94 03 01 	call	0x206	; 0x206 <ADC0_read>
 60e:	ec 01       	movw	r28, r24
			// Convert ADC-value to PWM signal
			uint16_t fanSpeed = ((39.0/1023.0)*adc_value);
 610:	bc 01       	movw	r22, r24
 612:	80 e0       	ldi	r24, 0x00	; 0
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__floatunsisf>
 61a:	2a e0       	ldi	r18, 0x0A	; 10
 61c:	37 e2       	ldi	r19, 0x27	; 39
 61e:	4c e1       	ldi	r20, 0x1C	; 28
 620:	5d e3       	ldi	r21, 0x3D	; 61
 622:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__mulsf3>
 626:	0e 94 43 03 	call	0x686	; 0x686 <__fixunssfsi>
 62a:	16 2f       	mov	r17, r22
 62c:	07 2f       	mov	r16, r23
			printf("ADC Value: %d\r\n", adc_value);
 62e:	df 93       	push	r29
 630:	cf 93       	push	r28
 632:	88 ec       	ldi	r24, 0xC8	; 200
 634:	90 e4       	ldi	r25, 0x40	; 64
 636:	9f 93       	push	r25
 638:	8f 93       	push	r24
 63a:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
			printf("Fan speed: %d\r\n", fanSpeed);
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	88 ed       	ldi	r24, 0xD8	; 216
 644:	90 e4       	ldi	r25, 0x40	; 64
 646:	9f 93       	push	r25
 648:	8f 93       	push	r24
 64a:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
			printf("RPM fan 1: %d\r\n", RPM_fan1);
 64e:	80 91 e8 40 	lds	r24, 0x40E8	; 0x8040e8 <__data_end>
 652:	90 91 e9 40 	lds	r25, 0x40E9	; 0x8040e9 <__data_end+0x1>
 656:	9f 93       	push	r25
 658:	8f 93       	push	r24
 65a:	81 e2       	ldi	r24, 0x21	; 33
 65c:	90 e4       	ldi	r25, 0x40	; 64
 65e:	9f 93       	push	r25
 660:	8f 93       	push	r24
 662:	0e 94 a3 04 	call	0x946	; 0x946 <printf>
			printf("\r\n");
 666:	86 ec       	ldi	r24, 0xC6	; 198
 668:	90 e4       	ldi	r25, 0x40	; 64
 66a:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
			printf("\r\n");
 66e:	86 ec       	ldi	r24, 0xC6	; 198
 670:	90 e4       	ldi	r25, 0x40	; 64
 672:	0e 94 b7 04 	call	0x96e	; 0x96e <puts>
			
			TCA0.SPLIT.LCMP0 = fanSpeed;
 676:	10 93 28 0a 	sts	0x0A28, r17	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
 67a:	8d b7       	in	r24, 0x3d	; 61
 67c:	9e b7       	in	r25, 0x3e	; 62
 67e:	0c 96       	adiw	r24, 0x0c	; 12
 680:	8d bf       	out	0x3d, r24	; 61
 682:	9e bf       	out	0x3e, r25	; 62
 684:	b2 cf       	rjmp	.-156    	; 0x5ea <main+0x22>

00000686 <__fixunssfsi>:
 686:	0e 94 b7 03 	call	0x76e	; 0x76e <__fp_splitA>
 68a:	88 f0       	brcs	.+34     	; 0x6ae <__fixunssfsi+0x28>
 68c:	9f 57       	subi	r25, 0x7F	; 127
 68e:	98 f0       	brcs	.+38     	; 0x6b6 <__fixunssfsi+0x30>
 690:	b9 2f       	mov	r27, r25
 692:	99 27       	eor	r25, r25
 694:	b7 51       	subi	r27, 0x17	; 23
 696:	b0 f0       	brcs	.+44     	; 0x6c4 <__fixunssfsi+0x3e>
 698:	e1 f0       	breq	.+56     	; 0x6d2 <__fixunssfsi+0x4c>
 69a:	66 0f       	add	r22, r22
 69c:	77 1f       	adc	r23, r23
 69e:	88 1f       	adc	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	1a f0       	brmi	.+6      	; 0x6aa <__fixunssfsi+0x24>
 6a4:	ba 95       	dec	r27
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__fixunssfsi+0x14>
 6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <__fixunssfsi+0x4c>
 6aa:	b1 30       	cpi	r27, 0x01	; 1
 6ac:	91 f0       	breq	.+36     	; 0x6d2 <__fixunssfsi+0x4c>
 6ae:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_zero>
 6b2:	b1 e0       	ldi	r27, 0x01	; 1
 6b4:	08 95       	ret
 6b6:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <__fp_zero>
 6ba:	67 2f       	mov	r22, r23
 6bc:	78 2f       	mov	r23, r24
 6be:	88 27       	eor	r24, r24
 6c0:	b8 5f       	subi	r27, 0xF8	; 248
 6c2:	39 f0       	breq	.+14     	; 0x6d2 <__fixunssfsi+0x4c>
 6c4:	b9 3f       	cpi	r27, 0xF9	; 249
 6c6:	cc f3       	brlt	.-14     	; 0x6ba <__fixunssfsi+0x34>
 6c8:	86 95       	lsr	r24
 6ca:	77 95       	ror	r23
 6cc:	67 95       	ror	r22
 6ce:	b3 95       	inc	r27
 6d0:	d9 f7       	brne	.-10     	; 0x6c8 <__fixunssfsi+0x42>
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__fixunssfsi+0x5c>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	08 95       	ret

000006e4 <__floatunsisf>:
 6e4:	e8 94       	clt
 6e6:	09 c0       	rjmp	.+18     	; 0x6fa <__floatsisf+0x12>

000006e8 <__floatsisf>:
 6e8:	97 fb       	bst	r25, 7
 6ea:	3e f4       	brtc	.+14     	; 0x6fa <__floatsisf+0x12>
 6ec:	90 95       	com	r25
 6ee:	80 95       	com	r24
 6f0:	70 95       	com	r23
 6f2:	61 95       	neg	r22
 6f4:	7f 4f       	sbci	r23, 0xFF	; 255
 6f6:	8f 4f       	sbci	r24, 0xFF	; 255
 6f8:	9f 4f       	sbci	r25, 0xFF	; 255
 6fa:	99 23       	and	r25, r25
 6fc:	a9 f0       	breq	.+42     	; 0x728 <__floatsisf+0x40>
 6fe:	f9 2f       	mov	r31, r25
 700:	96 e9       	ldi	r25, 0x96	; 150
 702:	bb 27       	eor	r27, r27
 704:	93 95       	inc	r25
 706:	f6 95       	lsr	r31
 708:	87 95       	ror	r24
 70a:	77 95       	ror	r23
 70c:	67 95       	ror	r22
 70e:	b7 95       	ror	r27
 710:	f1 11       	cpse	r31, r1
 712:	f8 cf       	rjmp	.-16     	; 0x704 <__floatsisf+0x1c>
 714:	fa f4       	brpl	.+62     	; 0x754 <__floatsisf+0x6c>
 716:	bb 0f       	add	r27, r27
 718:	11 f4       	brne	.+4      	; 0x71e <__floatsisf+0x36>
 71a:	60 ff       	sbrs	r22, 0
 71c:	1b c0       	rjmp	.+54     	; 0x754 <__floatsisf+0x6c>
 71e:	6f 5f       	subi	r22, 0xFF	; 255
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	9f 4f       	sbci	r25, 0xFF	; 255
 726:	16 c0       	rjmp	.+44     	; 0x754 <__floatsisf+0x6c>
 728:	88 23       	and	r24, r24
 72a:	11 f0       	breq	.+4      	; 0x730 <__floatsisf+0x48>
 72c:	96 e9       	ldi	r25, 0x96	; 150
 72e:	11 c0       	rjmp	.+34     	; 0x752 <__floatsisf+0x6a>
 730:	77 23       	and	r23, r23
 732:	21 f0       	breq	.+8      	; 0x73c <__floatsisf+0x54>
 734:	9e e8       	ldi	r25, 0x8E	; 142
 736:	87 2f       	mov	r24, r23
 738:	76 2f       	mov	r23, r22
 73a:	05 c0       	rjmp	.+10     	; 0x746 <__floatsisf+0x5e>
 73c:	66 23       	and	r22, r22
 73e:	71 f0       	breq	.+28     	; 0x75c <__floatsisf+0x74>
 740:	96 e8       	ldi	r25, 0x86	; 134
 742:	86 2f       	mov	r24, r22
 744:	70 e0       	ldi	r23, 0x00	; 0
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	2a f0       	brmi	.+10     	; 0x754 <__floatsisf+0x6c>
 74a:	9a 95       	dec	r25
 74c:	66 0f       	add	r22, r22
 74e:	77 1f       	adc	r23, r23
 750:	88 1f       	adc	r24, r24
 752:	da f7       	brpl	.-10     	; 0x74a <__floatsisf+0x62>
 754:	88 0f       	add	r24, r24
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <__fp_split3>:
 75e:	57 fd       	sbrc	r21, 7
 760:	90 58       	subi	r25, 0x80	; 128
 762:	44 0f       	add	r20, r20
 764:	55 1f       	adc	r21, r21
 766:	59 f0       	breq	.+22     	; 0x77e <__fp_splitA+0x10>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	71 f0       	breq	.+28     	; 0x788 <__fp_splitA+0x1a>
 76c:	47 95       	ror	r20

0000076e <__fp_splitA>:
 76e:	88 0f       	add	r24, r24
 770:	97 fb       	bst	r25, 7
 772:	99 1f       	adc	r25, r25
 774:	61 f0       	breq	.+24     	; 0x78e <__fp_splitA+0x20>
 776:	9f 3f       	cpi	r25, 0xFF	; 255
 778:	79 f0       	breq	.+30     	; 0x798 <__fp_splitA+0x2a>
 77a:	87 95       	ror	r24
 77c:	08 95       	ret
 77e:	12 16       	cp	r1, r18
 780:	13 06       	cpc	r1, r19
 782:	14 06       	cpc	r1, r20
 784:	55 1f       	adc	r21, r21
 786:	f2 cf       	rjmp	.-28     	; 0x76c <__fp_split3+0xe>
 788:	46 95       	lsr	r20
 78a:	f1 df       	rcall	.-30     	; 0x76e <__fp_splitA>
 78c:	08 c0       	rjmp	.+16     	; 0x79e <__fp_splitA+0x30>
 78e:	16 16       	cp	r1, r22
 790:	17 06       	cpc	r1, r23
 792:	18 06       	cpc	r1, r24
 794:	99 1f       	adc	r25, r25
 796:	f1 cf       	rjmp	.-30     	; 0x77a <__fp_splitA+0xc>
 798:	86 95       	lsr	r24
 79a:	71 05       	cpc	r23, r1
 79c:	61 05       	cpc	r22, r1
 79e:	08 94       	sec
 7a0:	08 95       	ret

000007a2 <__fp_zero>:
 7a2:	e8 94       	clt

000007a4 <__fp_szero>:
 7a4:	bb 27       	eor	r27, r27
 7a6:	66 27       	eor	r22, r22
 7a8:	77 27       	eor	r23, r23
 7aa:	cb 01       	movw	r24, r22
 7ac:	97 f9       	bld	r25, 7
 7ae:	08 95       	ret

000007b0 <__mulsf3>:
 7b0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__mulsf3x>
 7b4:	0c 94 5c 04 	jmp	0x8b8	; 0x8b8 <__fp_round>
 7b8:	0e 94 4e 04 	call	0x89c	; 0x89c <__fp_pscA>
 7bc:	38 f0       	brcs	.+14     	; 0x7cc <__mulsf3+0x1c>
 7be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fp_pscB>
 7c2:	20 f0       	brcs	.+8      	; 0x7cc <__mulsf3+0x1c>
 7c4:	95 23       	and	r25, r21
 7c6:	11 f0       	breq	.+4      	; 0x7cc <__mulsf3+0x1c>
 7c8:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_inf>
 7cc:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_nan>
 7d0:	11 24       	eor	r1, r1
 7d2:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_szero>

000007d6 <__mulsf3x>:
 7d6:	0e 94 af 03 	call	0x75e	; 0x75e <__fp_split3>
 7da:	70 f3       	brcs	.-36     	; 0x7b8 <__mulsf3+0x8>

000007dc <__mulsf3_pse>:
 7dc:	95 9f       	mul	r25, r21
 7de:	c1 f3       	breq	.-16     	; 0x7d0 <__mulsf3+0x20>
 7e0:	95 0f       	add	r25, r21
 7e2:	50 e0       	ldi	r21, 0x00	; 0
 7e4:	55 1f       	adc	r21, r21
 7e6:	62 9f       	mul	r22, r18
 7e8:	f0 01       	movw	r30, r0
 7ea:	72 9f       	mul	r23, r18
 7ec:	bb 27       	eor	r27, r27
 7ee:	f0 0d       	add	r31, r0
 7f0:	b1 1d       	adc	r27, r1
 7f2:	63 9f       	mul	r22, r19
 7f4:	aa 27       	eor	r26, r26
 7f6:	f0 0d       	add	r31, r0
 7f8:	b1 1d       	adc	r27, r1
 7fa:	aa 1f       	adc	r26, r26
 7fc:	64 9f       	mul	r22, r20
 7fe:	66 27       	eor	r22, r22
 800:	b0 0d       	add	r27, r0
 802:	a1 1d       	adc	r26, r1
 804:	66 1f       	adc	r22, r22
 806:	82 9f       	mul	r24, r18
 808:	22 27       	eor	r18, r18
 80a:	b0 0d       	add	r27, r0
 80c:	a1 1d       	adc	r26, r1
 80e:	62 1f       	adc	r22, r18
 810:	73 9f       	mul	r23, r19
 812:	b0 0d       	add	r27, r0
 814:	a1 1d       	adc	r26, r1
 816:	62 1f       	adc	r22, r18
 818:	83 9f       	mul	r24, r19
 81a:	a0 0d       	add	r26, r0
 81c:	61 1d       	adc	r22, r1
 81e:	22 1f       	adc	r18, r18
 820:	74 9f       	mul	r23, r20
 822:	33 27       	eor	r19, r19
 824:	a0 0d       	add	r26, r0
 826:	61 1d       	adc	r22, r1
 828:	23 1f       	adc	r18, r19
 82a:	84 9f       	mul	r24, r20
 82c:	60 0d       	add	r22, r0
 82e:	21 1d       	adc	r18, r1
 830:	82 2f       	mov	r24, r18
 832:	76 2f       	mov	r23, r22
 834:	6a 2f       	mov	r22, r26
 836:	11 24       	eor	r1, r1
 838:	9f 57       	subi	r25, 0x7F	; 127
 83a:	50 40       	sbci	r21, 0x00	; 0
 83c:	9a f0       	brmi	.+38     	; 0x864 <__mulsf3_pse+0x88>
 83e:	f1 f0       	breq	.+60     	; 0x87c <__mulsf3_pse+0xa0>
 840:	88 23       	and	r24, r24
 842:	4a f0       	brmi	.+18     	; 0x856 <__mulsf3_pse+0x7a>
 844:	ee 0f       	add	r30, r30
 846:	ff 1f       	adc	r31, r31
 848:	bb 1f       	adc	r27, r27
 84a:	66 1f       	adc	r22, r22
 84c:	77 1f       	adc	r23, r23
 84e:	88 1f       	adc	r24, r24
 850:	91 50       	subi	r25, 0x01	; 1
 852:	50 40       	sbci	r21, 0x00	; 0
 854:	a9 f7       	brne	.-22     	; 0x840 <__mulsf3_pse+0x64>
 856:	9e 3f       	cpi	r25, 0xFE	; 254
 858:	51 05       	cpc	r21, r1
 85a:	80 f0       	brcs	.+32     	; 0x87c <__mulsf3_pse+0xa0>
 85c:	0c 94 45 04 	jmp	0x88a	; 0x88a <__fp_inf>
 860:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_szero>
 864:	5f 3f       	cpi	r21, 0xFF	; 255
 866:	e4 f3       	brlt	.-8      	; 0x860 <__mulsf3_pse+0x84>
 868:	98 3e       	cpi	r25, 0xE8	; 232
 86a:	d4 f3       	brlt	.-12     	; 0x860 <__mulsf3_pse+0x84>
 86c:	86 95       	lsr	r24
 86e:	77 95       	ror	r23
 870:	67 95       	ror	r22
 872:	b7 95       	ror	r27
 874:	f7 95       	ror	r31
 876:	e7 95       	ror	r30
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	c1 f7       	brne	.-16     	; 0x86c <__mulsf3_pse+0x90>
 87c:	fe 2b       	or	r31, r30
 87e:	88 0f       	add	r24, r24
 880:	91 1d       	adc	r25, r1
 882:	96 95       	lsr	r25
 884:	87 95       	ror	r24
 886:	97 f9       	bld	r25, 7
 888:	08 95       	ret

0000088a <__fp_inf>:
 88a:	97 f9       	bld	r25, 7
 88c:	9f 67       	ori	r25, 0x7F	; 127
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	70 e0       	ldi	r23, 0x00	; 0
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	08 95       	ret

00000896 <__fp_nan>:
 896:	9f ef       	ldi	r25, 0xFF	; 255
 898:	80 ec       	ldi	r24, 0xC0	; 192
 89a:	08 95       	ret

0000089c <__fp_pscA>:
 89c:	00 24       	eor	r0, r0
 89e:	0a 94       	dec	r0
 8a0:	16 16       	cp	r1, r22
 8a2:	17 06       	cpc	r1, r23
 8a4:	18 06       	cpc	r1, r24
 8a6:	09 06       	cpc	r0, r25
 8a8:	08 95       	ret

000008aa <__fp_pscB>:
 8aa:	00 24       	eor	r0, r0
 8ac:	0a 94       	dec	r0
 8ae:	12 16       	cp	r1, r18
 8b0:	13 06       	cpc	r1, r19
 8b2:	14 06       	cpc	r1, r20
 8b4:	05 06       	cpc	r0, r21
 8b6:	08 95       	ret

000008b8 <__fp_round>:
 8b8:	09 2e       	mov	r0, r25
 8ba:	03 94       	inc	r0
 8bc:	00 0c       	add	r0, r0
 8be:	11 f4       	brne	.+4      	; 0x8c4 <__fp_round+0xc>
 8c0:	88 23       	and	r24, r24
 8c2:	52 f0       	brmi	.+20     	; 0x8d8 <__fp_round+0x20>
 8c4:	bb 0f       	add	r27, r27
 8c6:	40 f4       	brcc	.+16     	; 0x8d8 <__fp_round+0x20>
 8c8:	bf 2b       	or	r27, r31
 8ca:	11 f4       	brne	.+4      	; 0x8d0 <__fp_round+0x18>
 8cc:	60 ff       	sbrs	r22, 0
 8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__fp_round+0x20>
 8d0:	6f 5f       	subi	r22, 0xFF	; 255
 8d2:	7f 4f       	sbci	r23, 0xFF	; 255
 8d4:	8f 4f       	sbci	r24, 0xFF	; 255
 8d6:	9f 4f       	sbci	r25, 0xFF	; 255
 8d8:	08 95       	ret

000008da <__udivmodhi4>:
 8da:	aa 1b       	sub	r26, r26
 8dc:	bb 1b       	sub	r27, r27
 8de:	51 e1       	ldi	r21, 0x11	; 17
 8e0:	07 c0       	rjmp	.+14     	; 0x8f0 <__udivmodhi4_ep>

000008e2 <__udivmodhi4_loop>:
 8e2:	aa 1f       	adc	r26, r26
 8e4:	bb 1f       	adc	r27, r27
 8e6:	a6 17       	cp	r26, r22
 8e8:	b7 07       	cpc	r27, r23
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <__udivmodhi4_ep>
 8ec:	a6 1b       	sub	r26, r22
 8ee:	b7 0b       	sbc	r27, r23

000008f0 <__udivmodhi4_ep>:
 8f0:	88 1f       	adc	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	5a 95       	dec	r21
 8f6:	a9 f7       	brne	.-22     	; 0x8e2 <__udivmodhi4_loop>
 8f8:	80 95       	com	r24
 8fa:	90 95       	com	r25
 8fc:	bc 01       	movw	r22, r24
 8fe:	cd 01       	movw	r24, r26
 900:	08 95       	ret

00000902 <__udivmodsi4>:
 902:	a1 e2       	ldi	r26, 0x21	; 33
 904:	1a 2e       	mov	r1, r26
 906:	aa 1b       	sub	r26, r26
 908:	bb 1b       	sub	r27, r27
 90a:	fd 01       	movw	r30, r26
 90c:	0d c0       	rjmp	.+26     	; 0x928 <__udivmodsi4_ep>

0000090e <__udivmodsi4_loop>:
 90e:	aa 1f       	adc	r26, r26
 910:	bb 1f       	adc	r27, r27
 912:	ee 1f       	adc	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	a2 17       	cp	r26, r18
 918:	b3 07       	cpc	r27, r19
 91a:	e4 07       	cpc	r30, r20
 91c:	f5 07       	cpc	r31, r21
 91e:	20 f0       	brcs	.+8      	; 0x928 <__udivmodsi4_ep>
 920:	a2 1b       	sub	r26, r18
 922:	b3 0b       	sbc	r27, r19
 924:	e4 0b       	sbc	r30, r20
 926:	f5 0b       	sbc	r31, r21

00000928 <__udivmodsi4_ep>:
 928:	66 1f       	adc	r22, r22
 92a:	77 1f       	adc	r23, r23
 92c:	88 1f       	adc	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	1a 94       	dec	r1
 932:	69 f7       	brne	.-38     	; 0x90e <__udivmodsi4_loop>
 934:	60 95       	com	r22
 936:	70 95       	com	r23
 938:	80 95       	com	r24
 93a:	90 95       	com	r25
 93c:	9b 01       	movw	r18, r22
 93e:	ac 01       	movw	r20, r24
 940:	bd 01       	movw	r22, r26
 942:	cf 01       	movw	r24, r30
 944:	08 95       	ret

00000946 <printf>:
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	ae 01       	movw	r20, r28
 950:	4b 5f       	subi	r20, 0xFB	; 251
 952:	5f 4f       	sbci	r21, 0xFF	; 255
 954:	fa 01       	movw	r30, r20
 956:	61 91       	ld	r22, Z+
 958:	71 91       	ld	r23, Z+
 95a:	af 01       	movw	r20, r30
 95c:	80 91 f0 40 	lds	r24, 0x40F0	; 0x8040f0 <__iob+0x2>
 960:	90 91 f1 40 	lds	r25, 0x40F1	; 0x8040f1 <__iob+0x3>
 964:	0e 94 e7 04 	call	0x9ce	; 0x9ce <vfprintf>
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	08 95       	ret

0000096e <puts>:
 96e:	0f 93       	push	r16
 970:	1f 93       	push	r17
 972:	cf 93       	push	r28
 974:	df 93       	push	r29
 976:	e0 91 f0 40 	lds	r30, 0x40F0	; 0x8040f0 <__iob+0x2>
 97a:	f0 91 f1 40 	lds	r31, 0x40F1	; 0x8040f1 <__iob+0x3>
 97e:	23 81       	ldd	r18, Z+3	; 0x03
 980:	21 ff       	sbrs	r18, 1
 982:	1b c0       	rjmp	.+54     	; 0x9ba <puts+0x4c>
 984:	8c 01       	movw	r16, r24
 986:	d0 e0       	ldi	r29, 0x00	; 0
 988:	c0 e0       	ldi	r28, 0x00	; 0
 98a:	f8 01       	movw	r30, r16
 98c:	81 91       	ld	r24, Z+
 98e:	8f 01       	movw	r16, r30
 990:	60 91 f0 40 	lds	r22, 0x40F0	; 0x8040f0 <__iob+0x2>
 994:	70 91 f1 40 	lds	r23, 0x40F1	; 0x8040f1 <__iob+0x3>
 998:	db 01       	movw	r26, r22
 99a:	18 96       	adiw	r26, 0x08	; 8
 99c:	ed 91       	ld	r30, X+
 99e:	fc 91       	ld	r31, X
 9a0:	19 97       	sbiw	r26, 0x09	; 9
 9a2:	88 23       	and	r24, r24
 9a4:	31 f0       	breq	.+12     	; 0x9b2 <puts+0x44>
 9a6:	09 95       	icall
 9a8:	89 2b       	or	r24, r25
 9aa:	79 f3       	breq	.-34     	; 0x98a <puts+0x1c>
 9ac:	df ef       	ldi	r29, 0xFF	; 255
 9ae:	cf ef       	ldi	r28, 0xFF	; 255
 9b0:	ec cf       	rjmp	.-40     	; 0x98a <puts+0x1c>
 9b2:	8a e0       	ldi	r24, 0x0A	; 10
 9b4:	09 95       	icall
 9b6:	89 2b       	or	r24, r25
 9b8:	19 f0       	breq	.+6      	; 0x9c0 <puts+0x52>
 9ba:	8f ef       	ldi	r24, 0xFF	; 255
 9bc:	9f ef       	ldi	r25, 0xFF	; 255
 9be:	02 c0       	rjmp	.+4      	; 0x9c4 <puts+0x56>
 9c0:	8d 2f       	mov	r24, r29
 9c2:	9c 2f       	mov	r25, r28
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	08 95       	ret

000009ce <vfprintf>:
 9ce:	2f 92       	push	r2
 9d0:	3f 92       	push	r3
 9d2:	4f 92       	push	r4
 9d4:	5f 92       	push	r5
 9d6:	6f 92       	push	r6
 9d8:	7f 92       	push	r7
 9da:	8f 92       	push	r8
 9dc:	9f 92       	push	r9
 9de:	af 92       	push	r10
 9e0:	bf 92       	push	r11
 9e2:	cf 92       	push	r12
 9e4:	df 92       	push	r13
 9e6:	ef 92       	push	r14
 9e8:	ff 92       	push	r15
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	cd b7       	in	r28, 0x3d	; 61
 9f4:	de b7       	in	r29, 0x3e	; 62
 9f6:	2b 97       	sbiw	r28, 0x0b	; 11
 9f8:	cd bf       	out	0x3d, r28	; 61
 9fa:	de bf       	out	0x3e, r29	; 62
 9fc:	6c 01       	movw	r12, r24
 9fe:	7b 01       	movw	r14, r22
 a00:	8a 01       	movw	r16, r20
 a02:	fc 01       	movw	r30, r24
 a04:	16 82       	std	Z+6, r1	; 0x06
 a06:	17 82       	std	Z+7, r1	; 0x07
 a08:	83 81       	ldd	r24, Z+3	; 0x03
 a0a:	81 ff       	sbrs	r24, 1
 a0c:	cc c1       	rjmp	.+920    	; 0xda6 <vfprintf+0x3d8>
 a0e:	ce 01       	movw	r24, r28
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	3c 01       	movw	r6, r24
 a14:	f6 01       	movw	r30, r12
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	f7 01       	movw	r30, r14
 a1a:	93 fd       	sbrc	r25, 3
 a1c:	85 91       	lpm	r24, Z+
 a1e:	93 ff       	sbrs	r25, 3
 a20:	81 91       	ld	r24, Z+
 a22:	7f 01       	movw	r14, r30
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <vfprintf+0x5c>
 a28:	ba c1       	rjmp	.+884    	; 0xd9e <vfprintf+0x3d0>
 a2a:	85 32       	cpi	r24, 0x25	; 37
 a2c:	39 f4       	brne	.+14     	; 0xa3c <vfprintf+0x6e>
 a2e:	93 fd       	sbrc	r25, 3
 a30:	85 91       	lpm	r24, Z+
 a32:	93 ff       	sbrs	r25, 3
 a34:	81 91       	ld	r24, Z+
 a36:	7f 01       	movw	r14, r30
 a38:	85 32       	cpi	r24, 0x25	; 37
 a3a:	29 f4       	brne	.+10     	; 0xa46 <vfprintf+0x78>
 a3c:	b6 01       	movw	r22, r12
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 a44:	e7 cf       	rjmp	.-50     	; 0xa14 <vfprintf+0x46>
 a46:	91 2c       	mov	r9, r1
 a48:	21 2c       	mov	r2, r1
 a4a:	31 2c       	mov	r3, r1
 a4c:	ff e1       	ldi	r31, 0x1F	; 31
 a4e:	f3 15       	cp	r31, r3
 a50:	d8 f0       	brcs	.+54     	; 0xa88 <vfprintf+0xba>
 a52:	8b 32       	cpi	r24, 0x2B	; 43
 a54:	79 f0       	breq	.+30     	; 0xa74 <vfprintf+0xa6>
 a56:	38 f4       	brcc	.+14     	; 0xa66 <vfprintf+0x98>
 a58:	80 32       	cpi	r24, 0x20	; 32
 a5a:	79 f0       	breq	.+30     	; 0xa7a <vfprintf+0xac>
 a5c:	83 32       	cpi	r24, 0x23	; 35
 a5e:	a1 f4       	brne	.+40     	; 0xa88 <vfprintf+0xba>
 a60:	23 2d       	mov	r18, r3
 a62:	20 61       	ori	r18, 0x10	; 16
 a64:	1d c0       	rjmp	.+58     	; 0xaa0 <vfprintf+0xd2>
 a66:	8d 32       	cpi	r24, 0x2D	; 45
 a68:	61 f0       	breq	.+24     	; 0xa82 <vfprintf+0xb4>
 a6a:	80 33       	cpi	r24, 0x30	; 48
 a6c:	69 f4       	brne	.+26     	; 0xa88 <vfprintf+0xba>
 a6e:	23 2d       	mov	r18, r3
 a70:	21 60       	ori	r18, 0x01	; 1
 a72:	16 c0       	rjmp	.+44     	; 0xaa0 <vfprintf+0xd2>
 a74:	83 2d       	mov	r24, r3
 a76:	82 60       	ori	r24, 0x02	; 2
 a78:	38 2e       	mov	r3, r24
 a7a:	e3 2d       	mov	r30, r3
 a7c:	e4 60       	ori	r30, 0x04	; 4
 a7e:	3e 2e       	mov	r3, r30
 a80:	2a c0       	rjmp	.+84     	; 0xad6 <vfprintf+0x108>
 a82:	f3 2d       	mov	r31, r3
 a84:	f8 60       	ori	r31, 0x08	; 8
 a86:	1d c0       	rjmp	.+58     	; 0xac2 <vfprintf+0xf4>
 a88:	37 fc       	sbrc	r3, 7
 a8a:	2d c0       	rjmp	.+90     	; 0xae6 <vfprintf+0x118>
 a8c:	20 ed       	ldi	r18, 0xD0	; 208
 a8e:	28 0f       	add	r18, r24
 a90:	2a 30       	cpi	r18, 0x0A	; 10
 a92:	40 f0       	brcs	.+16     	; 0xaa4 <vfprintf+0xd6>
 a94:	8e 32       	cpi	r24, 0x2E	; 46
 a96:	b9 f4       	brne	.+46     	; 0xac6 <vfprintf+0xf8>
 a98:	36 fc       	sbrc	r3, 6
 a9a:	81 c1       	rjmp	.+770    	; 0xd9e <vfprintf+0x3d0>
 a9c:	23 2d       	mov	r18, r3
 a9e:	20 64       	ori	r18, 0x40	; 64
 aa0:	32 2e       	mov	r3, r18
 aa2:	19 c0       	rjmp	.+50     	; 0xad6 <vfprintf+0x108>
 aa4:	36 fe       	sbrs	r3, 6
 aa6:	06 c0       	rjmp	.+12     	; 0xab4 <vfprintf+0xe6>
 aa8:	8a e0       	ldi	r24, 0x0A	; 10
 aaa:	98 9e       	mul	r9, r24
 aac:	20 0d       	add	r18, r0
 aae:	11 24       	eor	r1, r1
 ab0:	92 2e       	mov	r9, r18
 ab2:	11 c0       	rjmp	.+34     	; 0xad6 <vfprintf+0x108>
 ab4:	ea e0       	ldi	r30, 0x0A	; 10
 ab6:	2e 9e       	mul	r2, r30
 ab8:	20 0d       	add	r18, r0
 aba:	11 24       	eor	r1, r1
 abc:	22 2e       	mov	r2, r18
 abe:	f3 2d       	mov	r31, r3
 ac0:	f0 62       	ori	r31, 0x20	; 32
 ac2:	3f 2e       	mov	r3, r31
 ac4:	08 c0       	rjmp	.+16     	; 0xad6 <vfprintf+0x108>
 ac6:	8c 36       	cpi	r24, 0x6C	; 108
 ac8:	21 f4       	brne	.+8      	; 0xad2 <vfprintf+0x104>
 aca:	83 2d       	mov	r24, r3
 acc:	80 68       	ori	r24, 0x80	; 128
 ace:	38 2e       	mov	r3, r24
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <vfprintf+0x108>
 ad2:	88 36       	cpi	r24, 0x68	; 104
 ad4:	41 f4       	brne	.+16     	; 0xae6 <vfprintf+0x118>
 ad6:	f7 01       	movw	r30, r14
 ad8:	93 fd       	sbrc	r25, 3
 ada:	85 91       	lpm	r24, Z+
 adc:	93 ff       	sbrs	r25, 3
 ade:	81 91       	ld	r24, Z+
 ae0:	7f 01       	movw	r14, r30
 ae2:	81 11       	cpse	r24, r1
 ae4:	b3 cf       	rjmp	.-154    	; 0xa4c <vfprintf+0x7e>
 ae6:	98 2f       	mov	r25, r24
 ae8:	9f 7d       	andi	r25, 0xDF	; 223
 aea:	95 54       	subi	r25, 0x45	; 69
 aec:	93 30       	cpi	r25, 0x03	; 3
 aee:	28 f4       	brcc	.+10     	; 0xafa <vfprintf+0x12c>
 af0:	0c 5f       	subi	r16, 0xFC	; 252
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	9f e3       	ldi	r25, 0x3F	; 63
 af6:	99 83       	std	Y+1, r25	; 0x01
 af8:	0d c0       	rjmp	.+26     	; 0xb14 <vfprintf+0x146>
 afa:	83 36       	cpi	r24, 0x63	; 99
 afc:	31 f0       	breq	.+12     	; 0xb0a <vfprintf+0x13c>
 afe:	83 37       	cpi	r24, 0x73	; 115
 b00:	71 f0       	breq	.+28     	; 0xb1e <vfprintf+0x150>
 b02:	83 35       	cpi	r24, 0x53	; 83
 b04:	09 f0       	breq	.+2      	; 0xb08 <vfprintf+0x13a>
 b06:	59 c0       	rjmp	.+178    	; 0xbba <vfprintf+0x1ec>
 b08:	21 c0       	rjmp	.+66     	; 0xb4c <vfprintf+0x17e>
 b0a:	f8 01       	movw	r30, r16
 b0c:	80 81       	ld	r24, Z
 b0e:	89 83       	std	Y+1, r24	; 0x01
 b10:	0e 5f       	subi	r16, 0xFE	; 254
 b12:	1f 4f       	sbci	r17, 0xFF	; 255
 b14:	88 24       	eor	r8, r8
 b16:	83 94       	inc	r8
 b18:	91 2c       	mov	r9, r1
 b1a:	53 01       	movw	r10, r6
 b1c:	13 c0       	rjmp	.+38     	; 0xb44 <vfprintf+0x176>
 b1e:	28 01       	movw	r4, r16
 b20:	f2 e0       	ldi	r31, 0x02	; 2
 b22:	4f 0e       	add	r4, r31
 b24:	51 1c       	adc	r5, r1
 b26:	f8 01       	movw	r30, r16
 b28:	a0 80       	ld	r10, Z
 b2a:	b1 80       	ldd	r11, Z+1	; 0x01
 b2c:	36 fe       	sbrs	r3, 6
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <vfprintf+0x168>
 b30:	69 2d       	mov	r22, r9
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0x16c>
 b36:	6f ef       	ldi	r22, 0xFF	; 255
 b38:	7f ef       	ldi	r23, 0xFF	; 255
 b3a:	c5 01       	movw	r24, r10
 b3c:	0e 94 f6 06 	call	0xdec	; 0xdec <strnlen>
 b40:	4c 01       	movw	r8, r24
 b42:	82 01       	movw	r16, r4
 b44:	f3 2d       	mov	r31, r3
 b46:	ff 77       	andi	r31, 0x7F	; 127
 b48:	3f 2e       	mov	r3, r31
 b4a:	16 c0       	rjmp	.+44     	; 0xb78 <vfprintf+0x1aa>
 b4c:	28 01       	movw	r4, r16
 b4e:	22 e0       	ldi	r18, 0x02	; 2
 b50:	42 0e       	add	r4, r18
 b52:	51 1c       	adc	r5, r1
 b54:	f8 01       	movw	r30, r16
 b56:	a0 80       	ld	r10, Z
 b58:	b1 80       	ldd	r11, Z+1	; 0x01
 b5a:	36 fe       	sbrs	r3, 6
 b5c:	03 c0       	rjmp	.+6      	; 0xb64 <vfprintf+0x196>
 b5e:	69 2d       	mov	r22, r9
 b60:	70 e0       	ldi	r23, 0x00	; 0
 b62:	02 c0       	rjmp	.+4      	; 0xb68 <vfprintf+0x19a>
 b64:	6f ef       	ldi	r22, 0xFF	; 255
 b66:	7f ef       	ldi	r23, 0xFF	; 255
 b68:	c5 01       	movw	r24, r10
 b6a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <strnlen_P>
 b6e:	4c 01       	movw	r8, r24
 b70:	f3 2d       	mov	r31, r3
 b72:	f0 68       	ori	r31, 0x80	; 128
 b74:	3f 2e       	mov	r3, r31
 b76:	82 01       	movw	r16, r4
 b78:	33 fc       	sbrc	r3, 3
 b7a:	1b c0       	rjmp	.+54     	; 0xbb2 <vfprintf+0x1e4>
 b7c:	82 2d       	mov	r24, r2
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	88 16       	cp	r8, r24
 b82:	99 06       	cpc	r9, r25
 b84:	b0 f4       	brcc	.+44     	; 0xbb2 <vfprintf+0x1e4>
 b86:	b6 01       	movw	r22, r12
 b88:	80 e2       	ldi	r24, 0x20	; 32
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 b90:	2a 94       	dec	r2
 b92:	f4 cf       	rjmp	.-24     	; 0xb7c <vfprintf+0x1ae>
 b94:	f5 01       	movw	r30, r10
 b96:	37 fc       	sbrc	r3, 7
 b98:	85 91       	lpm	r24, Z+
 b9a:	37 fe       	sbrs	r3, 7
 b9c:	81 91       	ld	r24, Z+
 b9e:	5f 01       	movw	r10, r30
 ba0:	b6 01       	movw	r22, r12
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 ba8:	21 10       	cpse	r2, r1
 baa:	2a 94       	dec	r2
 bac:	21 e0       	ldi	r18, 0x01	; 1
 bae:	82 1a       	sub	r8, r18
 bb0:	91 08       	sbc	r9, r1
 bb2:	81 14       	cp	r8, r1
 bb4:	91 04       	cpc	r9, r1
 bb6:	71 f7       	brne	.-36     	; 0xb94 <vfprintf+0x1c6>
 bb8:	e8 c0       	rjmp	.+464    	; 0xd8a <vfprintf+0x3bc>
 bba:	84 36       	cpi	r24, 0x64	; 100
 bbc:	11 f0       	breq	.+4      	; 0xbc2 <vfprintf+0x1f4>
 bbe:	89 36       	cpi	r24, 0x69	; 105
 bc0:	41 f5       	brne	.+80     	; 0xc12 <vfprintf+0x244>
 bc2:	f8 01       	movw	r30, r16
 bc4:	37 fe       	sbrs	r3, 7
 bc6:	07 c0       	rjmp	.+14     	; 0xbd6 <vfprintf+0x208>
 bc8:	60 81       	ld	r22, Z
 bca:	71 81       	ldd	r23, Z+1	; 0x01
 bcc:	82 81       	ldd	r24, Z+2	; 0x02
 bce:	93 81       	ldd	r25, Z+3	; 0x03
 bd0:	0c 5f       	subi	r16, 0xFC	; 252
 bd2:	1f 4f       	sbci	r17, 0xFF	; 255
 bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <vfprintf+0x218>
 bd6:	60 81       	ld	r22, Z
 bd8:	71 81       	ldd	r23, Z+1	; 0x01
 bda:	07 2e       	mov	r0, r23
 bdc:	00 0c       	add	r0, r0
 bde:	88 0b       	sbc	r24, r24
 be0:	99 0b       	sbc	r25, r25
 be2:	0e 5f       	subi	r16, 0xFE	; 254
 be4:	1f 4f       	sbci	r17, 0xFF	; 255
 be6:	f3 2d       	mov	r31, r3
 be8:	ff 76       	andi	r31, 0x6F	; 111
 bea:	3f 2e       	mov	r3, r31
 bec:	97 ff       	sbrs	r25, 7
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x234>
 bf0:	90 95       	com	r25
 bf2:	80 95       	com	r24
 bf4:	70 95       	com	r23
 bf6:	61 95       	neg	r22
 bf8:	7f 4f       	sbci	r23, 0xFF	; 255
 bfa:	8f 4f       	sbci	r24, 0xFF	; 255
 bfc:	9f 4f       	sbci	r25, 0xFF	; 255
 bfe:	f0 68       	ori	r31, 0x80	; 128
 c00:	3f 2e       	mov	r3, r31
 c02:	2a e0       	ldi	r18, 0x0A	; 10
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	a3 01       	movw	r20, r6
 c08:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__ultoa_invert>
 c0c:	88 2e       	mov	r8, r24
 c0e:	86 18       	sub	r8, r6
 c10:	45 c0       	rjmp	.+138    	; 0xc9c <vfprintf+0x2ce>
 c12:	85 37       	cpi	r24, 0x75	; 117
 c14:	31 f4       	brne	.+12     	; 0xc22 <vfprintf+0x254>
 c16:	23 2d       	mov	r18, r3
 c18:	2f 7e       	andi	r18, 0xEF	; 239
 c1a:	b2 2e       	mov	r11, r18
 c1c:	2a e0       	ldi	r18, 0x0A	; 10
 c1e:	30 e0       	ldi	r19, 0x00	; 0
 c20:	25 c0       	rjmp	.+74     	; 0xc6c <vfprintf+0x29e>
 c22:	93 2d       	mov	r25, r3
 c24:	99 7f       	andi	r25, 0xF9	; 249
 c26:	b9 2e       	mov	r11, r25
 c28:	8f 36       	cpi	r24, 0x6F	; 111
 c2a:	c1 f0       	breq	.+48     	; 0xc5c <vfprintf+0x28e>
 c2c:	18 f4       	brcc	.+6      	; 0xc34 <vfprintf+0x266>
 c2e:	88 35       	cpi	r24, 0x58	; 88
 c30:	79 f0       	breq	.+30     	; 0xc50 <vfprintf+0x282>
 c32:	b5 c0       	rjmp	.+362    	; 0xd9e <vfprintf+0x3d0>
 c34:	80 37       	cpi	r24, 0x70	; 112
 c36:	19 f0       	breq	.+6      	; 0xc3e <vfprintf+0x270>
 c38:	88 37       	cpi	r24, 0x78	; 120
 c3a:	21 f0       	breq	.+8      	; 0xc44 <vfprintf+0x276>
 c3c:	b0 c0       	rjmp	.+352    	; 0xd9e <vfprintf+0x3d0>
 c3e:	e9 2f       	mov	r30, r25
 c40:	e0 61       	ori	r30, 0x10	; 16
 c42:	be 2e       	mov	r11, r30
 c44:	b4 fe       	sbrs	r11, 4
 c46:	0d c0       	rjmp	.+26     	; 0xc62 <vfprintf+0x294>
 c48:	fb 2d       	mov	r31, r11
 c4a:	f4 60       	ori	r31, 0x04	; 4
 c4c:	bf 2e       	mov	r11, r31
 c4e:	09 c0       	rjmp	.+18     	; 0xc62 <vfprintf+0x294>
 c50:	34 fe       	sbrs	r3, 4
 c52:	0a c0       	rjmp	.+20     	; 0xc68 <vfprintf+0x29a>
 c54:	29 2f       	mov	r18, r25
 c56:	26 60       	ori	r18, 0x06	; 6
 c58:	b2 2e       	mov	r11, r18
 c5a:	06 c0       	rjmp	.+12     	; 0xc68 <vfprintf+0x29a>
 c5c:	28 e0       	ldi	r18, 0x08	; 8
 c5e:	30 e0       	ldi	r19, 0x00	; 0
 c60:	05 c0       	rjmp	.+10     	; 0xc6c <vfprintf+0x29e>
 c62:	20 e1       	ldi	r18, 0x10	; 16
 c64:	30 e0       	ldi	r19, 0x00	; 0
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <vfprintf+0x29e>
 c68:	20 e1       	ldi	r18, 0x10	; 16
 c6a:	32 e0       	ldi	r19, 0x02	; 2
 c6c:	f8 01       	movw	r30, r16
 c6e:	b7 fe       	sbrs	r11, 7
 c70:	07 c0       	rjmp	.+14     	; 0xc80 <vfprintf+0x2b2>
 c72:	60 81       	ld	r22, Z
 c74:	71 81       	ldd	r23, Z+1	; 0x01
 c76:	82 81       	ldd	r24, Z+2	; 0x02
 c78:	93 81       	ldd	r25, Z+3	; 0x03
 c7a:	0c 5f       	subi	r16, 0xFC	; 252
 c7c:	1f 4f       	sbci	r17, 0xFF	; 255
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x2be>
 c80:	60 81       	ld	r22, Z
 c82:	71 81       	ldd	r23, Z+1	; 0x01
 c84:	80 e0       	ldi	r24, 0x00	; 0
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 5f       	subi	r16, 0xFE	; 254
 c8a:	1f 4f       	sbci	r17, 0xFF	; 255
 c8c:	a3 01       	movw	r20, r6
 c8e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__ultoa_invert>
 c92:	88 2e       	mov	r8, r24
 c94:	86 18       	sub	r8, r6
 c96:	fb 2d       	mov	r31, r11
 c98:	ff 77       	andi	r31, 0x7F	; 127
 c9a:	3f 2e       	mov	r3, r31
 c9c:	36 fe       	sbrs	r3, 6
 c9e:	0d c0       	rjmp	.+26     	; 0xcba <vfprintf+0x2ec>
 ca0:	23 2d       	mov	r18, r3
 ca2:	2e 7f       	andi	r18, 0xFE	; 254
 ca4:	a2 2e       	mov	r10, r18
 ca6:	89 14       	cp	r8, r9
 ca8:	58 f4       	brcc	.+22     	; 0xcc0 <vfprintf+0x2f2>
 caa:	34 fe       	sbrs	r3, 4
 cac:	0b c0       	rjmp	.+22     	; 0xcc4 <vfprintf+0x2f6>
 cae:	32 fc       	sbrc	r3, 2
 cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <vfprintf+0x2f6>
 cb2:	83 2d       	mov	r24, r3
 cb4:	8e 7e       	andi	r24, 0xEE	; 238
 cb6:	a8 2e       	mov	r10, r24
 cb8:	05 c0       	rjmp	.+10     	; 0xcc4 <vfprintf+0x2f6>
 cba:	b8 2c       	mov	r11, r8
 cbc:	a3 2c       	mov	r10, r3
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x2f8>
 cc0:	b8 2c       	mov	r11, r8
 cc2:	01 c0       	rjmp	.+2      	; 0xcc6 <vfprintf+0x2f8>
 cc4:	b9 2c       	mov	r11, r9
 cc6:	a4 fe       	sbrs	r10, 4
 cc8:	0f c0       	rjmp	.+30     	; 0xce8 <vfprintf+0x31a>
 cca:	fe 01       	movw	r30, r28
 ccc:	e8 0d       	add	r30, r8
 cce:	f1 1d       	adc	r31, r1
 cd0:	80 81       	ld	r24, Z
 cd2:	80 33       	cpi	r24, 0x30	; 48
 cd4:	21 f4       	brne	.+8      	; 0xcde <vfprintf+0x310>
 cd6:	9a 2d       	mov	r25, r10
 cd8:	99 7e       	andi	r25, 0xE9	; 233
 cda:	a9 2e       	mov	r10, r25
 cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x322>
 cde:	a2 fe       	sbrs	r10, 2
 ce0:	06 c0       	rjmp	.+12     	; 0xcee <vfprintf+0x320>
 ce2:	b3 94       	inc	r11
 ce4:	b3 94       	inc	r11
 ce6:	04 c0       	rjmp	.+8      	; 0xcf0 <vfprintf+0x322>
 ce8:	8a 2d       	mov	r24, r10
 cea:	86 78       	andi	r24, 0x86	; 134
 cec:	09 f0       	breq	.+2      	; 0xcf0 <vfprintf+0x322>
 cee:	b3 94       	inc	r11
 cf0:	a3 fc       	sbrc	r10, 3
 cf2:	11 c0       	rjmp	.+34     	; 0xd16 <vfprintf+0x348>
 cf4:	a0 fe       	sbrs	r10, 0
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x336>
 cf8:	b2 14       	cp	r11, r2
 cfa:	88 f4       	brcc	.+34     	; 0xd1e <vfprintf+0x350>
 cfc:	28 0c       	add	r2, r8
 cfe:	92 2c       	mov	r9, r2
 d00:	9b 18       	sub	r9, r11
 d02:	0e c0       	rjmp	.+28     	; 0xd20 <vfprintf+0x352>
 d04:	b2 14       	cp	r11, r2
 d06:	60 f4       	brcc	.+24     	; 0xd20 <vfprintf+0x352>
 d08:	b6 01       	movw	r22, r12
 d0a:	80 e2       	ldi	r24, 0x20	; 32
 d0c:	90 e0       	ldi	r25, 0x00	; 0
 d0e:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d12:	b3 94       	inc	r11
 d14:	f7 cf       	rjmp	.-18     	; 0xd04 <vfprintf+0x336>
 d16:	b2 14       	cp	r11, r2
 d18:	18 f4       	brcc	.+6      	; 0xd20 <vfprintf+0x352>
 d1a:	2b 18       	sub	r2, r11
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x354>
 d1e:	98 2c       	mov	r9, r8
 d20:	21 2c       	mov	r2, r1
 d22:	a4 fe       	sbrs	r10, 4
 d24:	10 c0       	rjmp	.+32     	; 0xd46 <vfprintf+0x378>
 d26:	b6 01       	movw	r22, r12
 d28:	80 e3       	ldi	r24, 0x30	; 48
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d30:	a2 fe       	sbrs	r10, 2
 d32:	17 c0       	rjmp	.+46     	; 0xd62 <vfprintf+0x394>
 d34:	a1 fc       	sbrc	r10, 1
 d36:	03 c0       	rjmp	.+6      	; 0xd3e <vfprintf+0x370>
 d38:	88 e7       	ldi	r24, 0x78	; 120
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	02 c0       	rjmp	.+4      	; 0xd42 <vfprintf+0x374>
 d3e:	88 e5       	ldi	r24, 0x58	; 88
 d40:	90 e0       	ldi	r25, 0x00	; 0
 d42:	b6 01       	movw	r22, r12
 d44:	0c c0       	rjmp	.+24     	; 0xd5e <vfprintf+0x390>
 d46:	8a 2d       	mov	r24, r10
 d48:	86 78       	andi	r24, 0x86	; 134
 d4a:	59 f0       	breq	.+22     	; 0xd62 <vfprintf+0x394>
 d4c:	a1 fe       	sbrs	r10, 1
 d4e:	02 c0       	rjmp	.+4      	; 0xd54 <vfprintf+0x386>
 d50:	8b e2       	ldi	r24, 0x2B	; 43
 d52:	01 c0       	rjmp	.+2      	; 0xd56 <vfprintf+0x388>
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	a7 fc       	sbrc	r10, 7
 d58:	8d e2       	ldi	r24, 0x2D	; 45
 d5a:	b6 01       	movw	r22, r12
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d62:	89 14       	cp	r8, r9
 d64:	38 f4       	brcc	.+14     	; 0xd74 <vfprintf+0x3a6>
 d66:	b6 01       	movw	r22, r12
 d68:	80 e3       	ldi	r24, 0x30	; 48
 d6a:	90 e0       	ldi	r25, 0x00	; 0
 d6c:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d70:	9a 94       	dec	r9
 d72:	f7 cf       	rjmp	.-18     	; 0xd62 <vfprintf+0x394>
 d74:	8a 94       	dec	r8
 d76:	f3 01       	movw	r30, r6
 d78:	e8 0d       	add	r30, r8
 d7a:	f1 1d       	adc	r31, r1
 d7c:	80 81       	ld	r24, Z
 d7e:	b6 01       	movw	r22, r12
 d80:	90 e0       	ldi	r25, 0x00	; 0
 d82:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d86:	81 10       	cpse	r8, r1
 d88:	f5 cf       	rjmp	.-22     	; 0xd74 <vfprintf+0x3a6>
 d8a:	22 20       	and	r2, r2
 d8c:	09 f4       	brne	.+2      	; 0xd90 <vfprintf+0x3c2>
 d8e:	42 ce       	rjmp	.-892    	; 0xa14 <vfprintf+0x46>
 d90:	b6 01       	movw	r22, r12
 d92:	80 e2       	ldi	r24, 0x20	; 32
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	0e 94 01 07 	call	0xe02	; 0xe02 <fputc>
 d9a:	2a 94       	dec	r2
 d9c:	f6 cf       	rjmp	.-20     	; 0xd8a <vfprintf+0x3bc>
 d9e:	f6 01       	movw	r30, r12
 da0:	86 81       	ldd	r24, Z+6	; 0x06
 da2:	97 81       	ldd	r25, Z+7	; 0x07
 da4:	02 c0       	rjmp	.+4      	; 0xdaa <vfprintf+0x3dc>
 da6:	8f ef       	ldi	r24, 0xFF	; 255
 da8:	9f ef       	ldi	r25, 0xFF	; 255
 daa:	2b 96       	adiw	r28, 0x0b	; 11
 dac:	cd bf       	out	0x3d, r28	; 61
 dae:	de bf       	out	0x3e, r29	; 62
 db0:	df 91       	pop	r29
 db2:	cf 91       	pop	r28
 db4:	1f 91       	pop	r17
 db6:	0f 91       	pop	r16
 db8:	ff 90       	pop	r15
 dba:	ef 90       	pop	r14
 dbc:	df 90       	pop	r13
 dbe:	cf 90       	pop	r12
 dc0:	bf 90       	pop	r11
 dc2:	af 90       	pop	r10
 dc4:	9f 90       	pop	r9
 dc6:	8f 90       	pop	r8
 dc8:	7f 90       	pop	r7
 dca:	6f 90       	pop	r6
 dcc:	5f 90       	pop	r5
 dce:	4f 90       	pop	r4
 dd0:	3f 90       	pop	r3
 dd2:	2f 90       	pop	r2
 dd4:	08 95       	ret

00000dd6 <strnlen_P>:
 dd6:	fc 01       	movw	r30, r24
 dd8:	05 90       	lpm	r0, Z+
 dda:	61 50       	subi	r22, 0x01	; 1
 ddc:	70 40       	sbci	r23, 0x00	; 0
 dde:	01 10       	cpse	r0, r1
 de0:	d8 f7       	brcc	.-10     	; 0xdd8 <strnlen_P+0x2>
 de2:	80 95       	com	r24
 de4:	90 95       	com	r25
 de6:	8e 0f       	add	r24, r30
 de8:	9f 1f       	adc	r25, r31
 dea:	08 95       	ret

00000dec <strnlen>:
 dec:	fc 01       	movw	r30, r24
 dee:	61 50       	subi	r22, 0x01	; 1
 df0:	70 40       	sbci	r23, 0x00	; 0
 df2:	01 90       	ld	r0, Z+
 df4:	01 10       	cpse	r0, r1
 df6:	d8 f7       	brcc	.-10     	; 0xdee <strnlen+0x2>
 df8:	80 95       	com	r24
 dfa:	90 95       	com	r25
 dfc:	8e 0f       	add	r24, r30
 dfe:	9f 1f       	adc	r25, r31
 e00:	08 95       	ret

00000e02 <fputc>:
 e02:	0f 93       	push	r16
 e04:	1f 93       	push	r17
 e06:	cf 93       	push	r28
 e08:	df 93       	push	r29
 e0a:	fb 01       	movw	r30, r22
 e0c:	23 81       	ldd	r18, Z+3	; 0x03
 e0e:	21 fd       	sbrc	r18, 1
 e10:	03 c0       	rjmp	.+6      	; 0xe18 <fputc+0x16>
 e12:	8f ef       	ldi	r24, 0xFF	; 255
 e14:	9f ef       	ldi	r25, 0xFF	; 255
 e16:	2c c0       	rjmp	.+88     	; 0xe70 <fputc+0x6e>
 e18:	22 ff       	sbrs	r18, 2
 e1a:	16 c0       	rjmp	.+44     	; 0xe48 <fputc+0x46>
 e1c:	46 81       	ldd	r20, Z+6	; 0x06
 e1e:	57 81       	ldd	r21, Z+7	; 0x07
 e20:	24 81       	ldd	r18, Z+4	; 0x04
 e22:	35 81       	ldd	r19, Z+5	; 0x05
 e24:	42 17       	cp	r20, r18
 e26:	53 07       	cpc	r21, r19
 e28:	44 f4       	brge	.+16     	; 0xe3a <fputc+0x38>
 e2a:	a0 81       	ld	r26, Z
 e2c:	b1 81       	ldd	r27, Z+1	; 0x01
 e2e:	9d 01       	movw	r18, r26
 e30:	2f 5f       	subi	r18, 0xFF	; 255
 e32:	3f 4f       	sbci	r19, 0xFF	; 255
 e34:	20 83       	st	Z, r18
 e36:	31 83       	std	Z+1, r19	; 0x01
 e38:	8c 93       	st	X, r24
 e3a:	26 81       	ldd	r18, Z+6	; 0x06
 e3c:	37 81       	ldd	r19, Z+7	; 0x07
 e3e:	2f 5f       	subi	r18, 0xFF	; 255
 e40:	3f 4f       	sbci	r19, 0xFF	; 255
 e42:	26 83       	std	Z+6, r18	; 0x06
 e44:	37 83       	std	Z+7, r19	; 0x07
 e46:	14 c0       	rjmp	.+40     	; 0xe70 <fputc+0x6e>
 e48:	8b 01       	movw	r16, r22
 e4a:	ec 01       	movw	r28, r24
 e4c:	fb 01       	movw	r30, r22
 e4e:	00 84       	ldd	r0, Z+8	; 0x08
 e50:	f1 85       	ldd	r31, Z+9	; 0x09
 e52:	e0 2d       	mov	r30, r0
 e54:	09 95       	icall
 e56:	89 2b       	or	r24, r25
 e58:	e1 f6       	brne	.-72     	; 0xe12 <fputc+0x10>
 e5a:	d8 01       	movw	r26, r16
 e5c:	16 96       	adiw	r26, 0x06	; 6
 e5e:	8d 91       	ld	r24, X+
 e60:	9c 91       	ld	r25, X
 e62:	17 97       	sbiw	r26, 0x07	; 7
 e64:	01 96       	adiw	r24, 0x01	; 1
 e66:	16 96       	adiw	r26, 0x06	; 6
 e68:	8d 93       	st	X+, r24
 e6a:	9c 93       	st	X, r25
 e6c:	17 97       	sbiw	r26, 0x07	; 7
 e6e:	ce 01       	movw	r24, r28
 e70:	df 91       	pop	r29
 e72:	cf 91       	pop	r28
 e74:	1f 91       	pop	r17
 e76:	0f 91       	pop	r16
 e78:	08 95       	ret

00000e7a <__ultoa_invert>:
 e7a:	fa 01       	movw	r30, r20
 e7c:	aa 27       	eor	r26, r26
 e7e:	28 30       	cpi	r18, 0x08	; 8
 e80:	51 f1       	breq	.+84     	; 0xed6 <__ultoa_invert+0x5c>
 e82:	20 31       	cpi	r18, 0x10	; 16
 e84:	81 f1       	breq	.+96     	; 0xee6 <__ultoa_invert+0x6c>
 e86:	e8 94       	clt
 e88:	6f 93       	push	r22
 e8a:	6e 7f       	andi	r22, 0xFE	; 254
 e8c:	6e 5f       	subi	r22, 0xFE	; 254
 e8e:	7f 4f       	sbci	r23, 0xFF	; 255
 e90:	8f 4f       	sbci	r24, 0xFF	; 255
 e92:	9f 4f       	sbci	r25, 0xFF	; 255
 e94:	af 4f       	sbci	r26, 0xFF	; 255
 e96:	b1 e0       	ldi	r27, 0x01	; 1
 e98:	3e d0       	rcall	.+124    	; 0xf16 <__ultoa_invert+0x9c>
 e9a:	b4 e0       	ldi	r27, 0x04	; 4
 e9c:	3c d0       	rcall	.+120    	; 0xf16 <__ultoa_invert+0x9c>
 e9e:	67 0f       	add	r22, r23
 ea0:	78 1f       	adc	r23, r24
 ea2:	89 1f       	adc	r24, r25
 ea4:	9a 1f       	adc	r25, r26
 ea6:	a1 1d       	adc	r26, r1
 ea8:	68 0f       	add	r22, r24
 eaa:	79 1f       	adc	r23, r25
 eac:	8a 1f       	adc	r24, r26
 eae:	91 1d       	adc	r25, r1
 eb0:	a1 1d       	adc	r26, r1
 eb2:	6a 0f       	add	r22, r26
 eb4:	71 1d       	adc	r23, r1
 eb6:	81 1d       	adc	r24, r1
 eb8:	91 1d       	adc	r25, r1
 eba:	a1 1d       	adc	r26, r1
 ebc:	20 d0       	rcall	.+64     	; 0xefe <__ultoa_invert+0x84>
 ebe:	09 f4       	brne	.+2      	; 0xec2 <__ultoa_invert+0x48>
 ec0:	68 94       	set
 ec2:	3f 91       	pop	r19
 ec4:	2a e0       	ldi	r18, 0x0A	; 10
 ec6:	26 9f       	mul	r18, r22
 ec8:	11 24       	eor	r1, r1
 eca:	30 19       	sub	r19, r0
 ecc:	30 5d       	subi	r19, 0xD0	; 208
 ece:	31 93       	st	Z+, r19
 ed0:	de f6       	brtc	.-74     	; 0xe88 <__ultoa_invert+0xe>
 ed2:	cf 01       	movw	r24, r30
 ed4:	08 95       	ret
 ed6:	46 2f       	mov	r20, r22
 ed8:	47 70       	andi	r20, 0x07	; 7
 eda:	40 5d       	subi	r20, 0xD0	; 208
 edc:	41 93       	st	Z+, r20
 ede:	b3 e0       	ldi	r27, 0x03	; 3
 ee0:	0f d0       	rcall	.+30     	; 0xf00 <__ultoa_invert+0x86>
 ee2:	c9 f7       	brne	.-14     	; 0xed6 <__ultoa_invert+0x5c>
 ee4:	f6 cf       	rjmp	.-20     	; 0xed2 <__ultoa_invert+0x58>
 ee6:	46 2f       	mov	r20, r22
 ee8:	4f 70       	andi	r20, 0x0F	; 15
 eea:	40 5d       	subi	r20, 0xD0	; 208
 eec:	4a 33       	cpi	r20, 0x3A	; 58
 eee:	18 f0       	brcs	.+6      	; 0xef6 <__ultoa_invert+0x7c>
 ef0:	49 5d       	subi	r20, 0xD9	; 217
 ef2:	31 fd       	sbrc	r19, 1
 ef4:	40 52       	subi	r20, 0x20	; 32
 ef6:	41 93       	st	Z+, r20
 ef8:	02 d0       	rcall	.+4      	; 0xefe <__ultoa_invert+0x84>
 efa:	a9 f7       	brne	.-22     	; 0xee6 <__ultoa_invert+0x6c>
 efc:	ea cf       	rjmp	.-44     	; 0xed2 <__ultoa_invert+0x58>
 efe:	b4 e0       	ldi	r27, 0x04	; 4
 f00:	a6 95       	lsr	r26
 f02:	97 95       	ror	r25
 f04:	87 95       	ror	r24
 f06:	77 95       	ror	r23
 f08:	67 95       	ror	r22
 f0a:	ba 95       	dec	r27
 f0c:	c9 f7       	brne	.-14     	; 0xf00 <__ultoa_invert+0x86>
 f0e:	00 97       	sbiw	r24, 0x00	; 0
 f10:	61 05       	cpc	r22, r1
 f12:	71 05       	cpc	r23, r1
 f14:	08 95       	ret
 f16:	9b 01       	movw	r18, r22
 f18:	ac 01       	movw	r20, r24
 f1a:	0a 2e       	mov	r0, r26
 f1c:	06 94       	lsr	r0
 f1e:	57 95       	ror	r21
 f20:	47 95       	ror	r20
 f22:	37 95       	ror	r19
 f24:	27 95       	ror	r18
 f26:	ba 95       	dec	r27
 f28:	c9 f7       	brne	.-14     	; 0xf1c <__ultoa_invert+0xa2>
 f2a:	62 0f       	add	r22, r18
 f2c:	73 1f       	adc	r23, r19
 f2e:	84 1f       	adc	r24, r20
 f30:	95 1f       	adc	r25, r21
 f32:	a0 1d       	adc	r26, r0
 f34:	08 95       	ret

00000f36 <_exit>:
 f36:	f8 94       	cli

00000f38 <__stop_program>:
 f38:	ff cf       	rjmp	.-2      	; 0xf38 <__stop_program>
