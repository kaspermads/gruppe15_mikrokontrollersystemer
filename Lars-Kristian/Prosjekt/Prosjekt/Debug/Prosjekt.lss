
Prosjekt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00804000  00001054  000010e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001054  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  0080411a  0080411a  00001202  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000051b0  00000000  00000000  00001358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003025  00000000  00000000  00006508  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e3  00000000  00000000  0000952d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00009d10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d16  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000985  00000000  00000000  0000dd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000e6df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 34 01 	jmp	0x268	; 0x268 <__vector_6>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_14>
      3c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_15>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	df e7       	ldi	r29, 0x7F	; 127
      fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
     100:	11 e4       	ldi	r17, 0x41	; 65
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b0 e4       	ldi	r27, 0x40	; 64
     106:	e4 e5       	ldi	r30, 0x54	; 84
     108:	f0 e1       	ldi	r31, 0x10	; 16
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	aa 31       	cpi	r26, 0x1A	; 26
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	21 e4       	ldi	r18, 0x41	; 65
     11c:	aa e1       	ldi	r26, 0x1A	; 26
     11e:	b1 e4       	ldi	r27, 0x41	; 65
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a6 32       	cpi	r26, 0x26	; 38
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 13 03 	call	0x626	; 0x626 <main>
     12e:	0c 94 28 08 	jmp	0x1050	; 0x1050 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <USART3_printChar>:
	USART3.CTRLB |= USART_TXEN_bm;	// Aktiverer USART3-senderen i kontrollregister B med bitmasken til TX
}
void USART3_printChar(char c, FILE *stream)
{
	// Sjekker om bufferet er tomt før ny sending
	while (!(USART3.STATUS & USART_DREIF_bm))
     136:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
     13a:	95 ff       	sbrs	r25, 5
     13c:	fc cf       	rjmp	.-8      	; 0x136 <USART3_printChar>
	{
		;
	}
	USART3.TXDATAL = c;	// Sender en karakter
     13e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
     142:	08 95       	ret

00000144 <TCA0_init>:


void TCA0_init(void)
{
	// PORTD pins for output PWM-signals.
	PORTD.DIRSET = PIN0_bm | PIN1_bm | PIN4_bm | PIN3_bm;
     144:	8b e1       	ldi	r24, 0x1B	; 27
     146:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
	
	//set waveform output on PORT D
	PORTMUX.TCAROUTEA = PORTMUX_TCA0_PORTD_gc;
     14a:	83 e0       	ldi	r24, 0x03	; 3
     14c:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>
	
	// enable compare channel 0, 1 and set single-slope PWM mode
	TCA0.SINGLE.CTRLB = TCA_SINGLE_CMP0EN_bm | TCA_SINGLE_CMP1EN_bm | TCA_SINGLE_WGMODE_SINGLESLOPE_gc;
     150:	e0 e0       	ldi	r30, 0x00	; 0
     152:	fa e0       	ldi	r31, 0x0A	; 10
     154:	83 e3       	ldi	r24, 0x33	; 51
     156:	81 83       	std	Z+1, r24	; 0x01
	
	 // enable split mode
    TCA0.SPLIT.CTRLD = TCA_SPLIT_SPLITM_bm; 
     158:	91 e0       	ldi	r25, 0x01	; 1
     15a:	93 83       	std	Z+3, r25	; 0x03
	
	// enable compare channel 0 for the higher byte, enable compare channel 0 for the lower byte
	TCA0.SPLIT.CTRLB = TCA_SPLIT_HCMP0EN_bm | TCA_SPLIT_LCMP0EN_bm | TCA_SPLIT_HCMP1EN_bm | TCA_SPLIT_LCMP1EN_bm;    
     15c:	81 83       	std	Z+1, r24	; 0x01
	
	
	// L0 = PIN0, L1=PIN1, H0=PIN3, H1=PIN4
	// set the PWM frequencies and duty cycles
    TCA0.SPLIT.LPER = PERIOD_FREQUENCY;                          
     15e:	87 e2       	ldi	r24, 0x27	; 39
     160:	86 a3       	std	Z+38, r24	; 0x26
    TCA0.SPLIT.LCMP0 = DUTY_CYCLE_MIN_VALUE;                           
     162:	10 a6       	std	Z+40, r1	; 0x28
    TCA0.SPLIT.HPER = PERIOD_FREQUENCY;                             
     164:	87 a3       	std	Z+39, r24	; 0x27
    TCA0.SPLIT.HCMP0 = DUTY_CYCLE_MIN_VALUE;
     166:	11 a6       	std	Z+41, r1	; 0x29
	
	//TCA0.SPLIT.LPER = PERIOD_FREQUENCY;                          
    TCA0.SPLIT.LCMP1 = DUTY_CYCLE_MIN_VALUE;                           
     168:	12 a6       	std	Z+42, r1	; 0x2a
    //TCA0.SPLIT.HPER = PERIOD_FREQUENCY;                             
    TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MIN_VALUE; 
     16a:	13 a6       	std	Z+43, r1	; 0x2b
	
	TCA0.SPLIT.CTRLA = TCA_SPLIT_CLKSEL_DIV4_gc | TCA_SPLIT_ENABLE_bm;   // set clock source (sys_clk/4), and start timer
     16c:	85 e0       	ldi	r24, 0x05	; 5
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret

00000172 <TCB0_init>:
}


void TCB0_init(void)
{
	PORTB.DIR &= ~PIN4_bm;
     172:	e0 e2       	ldi	r30, 0x20	; 32
     174:	f4 e0       	ldi	r31, 0x04	; 4
     176:	80 81       	ld	r24, Z
     178:	8f 7e       	andi	r24, 0xEF	; 239
     17a:	80 83       	st	Z, r24
	PORTB.PIN4CTRL |= PORT_PULLUPEN_bm;
     17c:	84 89       	ldd	r24, Z+20	; 0x14
     17e:	88 60       	ori	r24, 0x08	; 8
     180:	84 8b       	std	Z+20, r24	; 0x14
	
	TCB0.CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;	// enable timer/counter TCB0 and use clock from TCA0
     182:	e0 e0       	ldi	r30, 0x00	; 0
     184:	fb e0       	ldi	r31, 0x0B	; 11
     186:	85 e0       	ldi	r24, 0x05	; 5
     188:	80 83       	st	Z, r24
	TCB0.CTRLB = TCB_CNTMODE_PW_gc;	// set timer mod to input capture frequency and PWM measurement mode
     18a:	84 e0       	ldi	r24, 0x04	; 4
     18c:	81 83       	std	Z+1, r24	; 0x01
	
	TCB0.INTCTRL = TCB_CAPT_bm; // interrupt enabled for capture
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	85 83       	std	Z+5, r24	; 0x05
	
	TCB0.EVCTRL = TCB_CAPTEI_bm | TCB_FILTER_bm; // Capture event input enable
     192:	91 e4       	ldi	r25, 0x41	; 65
     194:	94 83       	std	Z+4, r25	; 0x04
	
	EVSYS.CHANNEL0 = EVSYS_CHANNEL0_PORTB_PIN4_gc; //	input event channel 0, port b on pin 4
     196:	e0 e0       	ldi	r30, 0x00	; 0
     198:	f2 e0       	ldi	r31, 0x02	; 2
     19a:	9c e4       	ldi	r25, 0x4C	; 76
     19c:	90 8b       	std	Z+16, r25	; 0x10
	EVSYS.USERTCB0CAPT = EVSYS_USER_CHANNEL0_gc; // connects channel 0(portb pin0????) specific to TCB0 input capture mode
     19e:	86 af       	std	Z+62, r24	; 0x3e
     1a0:	08 95       	ret

000001a2 <TCB1_init>:
}


void TCB1_init(void)
{
	PORTB.DIR &= ~PIN5_bm;
     1a2:	e0 e2       	ldi	r30, 0x20	; 32
     1a4:	f4 e0       	ldi	r31, 0x04	; 4
     1a6:	80 81       	ld	r24, Z
     1a8:	8f 7d       	andi	r24, 0xDF	; 223
     1aa:	80 83       	st	Z, r24
	PORTB.PIN5CTRL |= PORT_PULLUPEN_bm;
     1ac:	85 89       	ldd	r24, Z+21	; 0x15
     1ae:	88 60       	ori	r24, 0x08	; 8
     1b0:	85 8b       	std	Z+21, r24	; 0x15
	
	TCB1.CTRLA = TCB_ENABLE_bm | TCB_CLKSEL_TCA0_gc;	// enable timer/counter TCB0 and use clock from TCA0
     1b2:	e0 e1       	ldi	r30, 0x10	; 16
     1b4:	fb e0       	ldi	r31, 0x0B	; 11
     1b6:	85 e0       	ldi	r24, 0x05	; 5
     1b8:	80 83       	st	Z, r24
	TCB1.CTRLB = TCB_CNTMODE_PW_gc;	// set timer mod to input capture frequency and PWM measurement mode
     1ba:	84 e0       	ldi	r24, 0x04	; 4
     1bc:	81 83       	std	Z+1, r24	; 0x01
	
	TCB1.INTCTRL = TCB_CAPT_bm; // interrupt enabled for capture
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	85 83       	std	Z+5, r24	; 0x05
	
	TCB1.EVCTRL = TCB_CAPTEI_bm | TCB_FILTER_bm ; // Capture event input enable
     1c2:	81 e4       	ldi	r24, 0x41	; 65
     1c4:	84 83       	std	Z+4, r24	; 0x04
	
	EVSYS.CHANNEL1 = EVSYS_CHANNEL1_PORTB_PIN5_gc; //	input event channel 1, port b on pin 5
     1c6:	8d e4       	ldi	r24, 0x4D	; 77
     1c8:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <__TEXT_REGION_LENGTH__+0x7e0211>
	EVSYS.USERTCB1CAPT = EVSYS_USER_CHANNEL1_gc; // connects channel 0(portb pin0????) specific to TCB0 input capture mode
     1cc:	82 e0       	ldi	r24, 0x02	; 2
     1ce:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <__TEXT_REGION_LENGTH__+0x7e0240>
     1d2:	08 95       	ret

000001d4 <ADC0_init>:
bool ADC0_conersionDone(void);

void ADC0_init(void)
{
	/* Disable digital input buffer */
	PORTD.PIN6CTRL &= ~PORT_ISC_gm;
     1d4:	e0 e6       	ldi	r30, 0x60	; 96
     1d6:	f4 e0       	ldi	r31, 0x04	; 4
     1d8:	86 89       	ldd	r24, Z+22	; 0x16
     1da:	88 7f       	andi	r24, 0xF8	; 248
     1dc:	86 8b       	std	Z+22, r24	; 0x16
	PORTD.PIN6CTRL |= PORT_ISC_INPUT_DISABLE_gc;
     1de:	86 89       	ldd	r24, Z+22	; 0x16
     1e0:	84 60       	ori	r24, 0x04	; 4
     1e2:	86 8b       	std	Z+22, r24	; 0x16

	/* Disable pull-up resistor */
	PORTD.PIN6CTRL &= ~PORT_PULLUPEN_bm;
     1e4:	86 89       	ldd	r24, Z+22	; 0x16
     1e6:	87 7f       	andi	r24, 0xF7	; 247
     1e8:	86 8b       	std	Z+22, r24	; 0x16

	ADC0.CTRLC = ADC_PRESC_DIV4_gc; /* CLK_PER divided by 4 */
     1ea:	e0 e0       	ldi	r30, 0x00	; 0
     1ec:	f6 e0       	ldi	r31, 0x06	; 6
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	82 83       	std	Z+2, r24	; 0x02
	
	VREF.ADC0REF = VREF_REFSEL_VDD_gc ; /* VDD as reference */
     1f2:	85 e0       	ldi	r24, 0x05	; 5
     1f4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>

	ADC0.CTRLA = ADC_ENABLE_bm | ADC_RESSEL_10BIT_gc; /* 10-bit mode */
     1f8:	80 83       	st	Z, r24

	/* Select ADC channel */
	ADC0.MUXPOS = ADC_MUXPOS_AIN6_gc;
     1fa:	86 e0       	ldi	r24, 0x06	; 6
     1fc:	80 87       	std	Z+8, r24	; 0x08

	/* Enable FreeRun mode */
	ADC0.CTRLA |= ADC_FREERUN_bm;
     1fe:	80 81       	ld	r24, Z
     200:	82 60       	ori	r24, 0x02	; 2
     202:	80 83       	st	Z, r24
     204:	08 95       	ret

00000206 <ADC0_read>:
}
uint16_t ADC0_read(void)
{
	/* Clear the interrupt flag by writing 1: */
	ADC0.INTFLAGS = ADC_RESRDY_bm;
     206:	e0 e0       	ldi	r30, 0x00	; 0
     208:	f6 e0       	ldi	r31, 0x06	; 6
     20a:	81 e0       	ldi	r24, 0x01	; 1
     20c:	85 87       	std	Z+13, r24	; 0x0d

	return ADC0.RES;
     20e:	80 89       	ldd	r24, Z+16	; 0x10
     210:	91 89       	ldd	r25, Z+17	; 0x11
}
     212:	08 95       	ret

00000214 <ADC0_start>:
void ADC0_start(void)
{
	/* Start conversion */
	ADC0.COMMAND = ADC_STCONV_bm;
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     21a:	08 95       	ret

0000021c <ADC0_conersionDone>:
}
bool ADC0_conersionDone(void)
{
	return (ADC0.INTFLAGS & ADC_RESRDY_bm);
     21c:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
}
     220:	81 70       	andi	r24, 0x01	; 1
     222:	08 95       	ret

00000224 <file_stream>:

void file_stream(void)
{
	// Lager en egendefinert output stream som skal håndteres av funksjonen USART3_printChar
	static FILE USART3_stream = FDEV_SETUP_STREAM(USART3_printChar, NULL, _FDEV_SETUP_WRITE);
	stdout = &USART3_stream;	// Erstatter standard output stream med den egen definerte
     224:	80 e0       	ldi	r24, 0x00	; 0
     226:	90 e4       	ldi	r25, 0x40	; 64
     228:	80 93 22 41 	sts	0x4122, r24	; 0x804122 <__iob+0x2>
     22c:	90 93 23 41 	sts	0x4123, r25	; 0x804123 <__iob+0x3>
     230:	08 95       	ret

00000232 <USART3_init>:
}

void USART3_init(void)
{
	// RX input and TX output
	PORTB.DIR &= ~PIN1_bm;
     232:	e0 e2       	ldi	r30, 0x20	; 32
     234:	f4 e0       	ldi	r31, 0x04	; 4
     236:	80 81       	ld	r24, Z
     238:	8d 7f       	andi	r24, 0xFD	; 253
     23a:	80 83       	st	Z, r24
	PORTB.DIR |= PIN0_bm;
     23c:	80 81       	ld	r24, Z
     23e:	81 60       	ori	r24, 0x01	; 1
     240:	80 83       	st	Z, r24

	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600);	// Baud rate for USART3
     242:	e0 e6       	ldi	r30, 0x60	; 96
     244:	f8 e0       	ldi	r31, 0x08	; 8
     246:	83 e8       	ldi	r24, 0x83	; 131
     248:	96 e0       	ldi	r25, 0x06	; 6
     24a:	80 87       	std	Z+8, r24	; 0x08
     24c:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLB |= USART_TXEN_bm;	// Aktiverer USART3-senderen i kontrollregister B med bitmasken til TX
     24e:	86 81       	ldd	r24, Z+6	; 0x06
     250:	80 64       	ori	r24, 0x40	; 64
     252:	86 83       	std	Z+6, r24	; 0x06
     254:	08 95       	ret

00000256 <RTC_init>:


void RTC_init(void)
{
	// Enables the source clock for the RTC counter
	RTC.CTRLA = RTC_RTCEN_bm | RTC_PRESCALER_DIV1_gc; // Enable RTC, select presaler
     256:	e0 e4       	ldi	r30, 0x40	; 64
     258:	f1 e0       	ldi	r31, 0x01	; 1
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	80 83       	st	Z, r24
	//RTC.INTCTRL = RTC_OVF_bm;
	RTC.CLKSEL = RTC_CLKSEL_OSC1K_gc; // Select source for the RTC clock
     25e:	87 83       	std	Z+7, r24	; 0x07
	
	// Enables the PIT (Periodic Interrupt Timer)
	RTC.PITCTRLA = RTC_PITEN_bm | RTC_PERIOD_CYC1024_gc; // Enable PIT and select number of clock cycles between interrupt
     260:	99 e4       	ldi	r25, 0x49	; 73
     262:	90 8b       	std	Z+16, r25	; 0x10
	RTC.PITINTCTRL = RTC_PI_bm;	// Enable interrupt
     264:	82 8b       	std	Z+18, r24	; 0x12
     266:	08 95       	ret

00000268 <__vector_6>:
}

// RTC interrupt
ISR(RTC_PIT_vect)
{
     268:	1f 92       	push	r1
     26a:	0f 92       	push	r0
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	0f 92       	push	r0
     270:	11 24       	eor	r1, r1
     272:	8f 93       	push	r24
     274:	9f 93       	push	r25
	counter ++; // Counter represent seconds
     276:	80 91 1e 41 	lds	r24, 0x411E	; 0x80411e <counter>
     27a:	90 91 1f 41 	lds	r25, 0x411F	; 0x80411f <counter+0x1>
     27e:	01 96       	adiw	r24, 0x01	; 1
     280:	80 93 1e 41 	sts	0x411E, r24	; 0x80411e <counter>
     284:	90 93 1f 41 	sts	0x411F, r25	; 0x80411f <counter+0x1>
	RTC.PITINTFLAGS = RTC_PI_bm; // Clears the interrupt flag
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7e0153>
}
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <PWM_freq_to_RPM>:
	}
}

uint16_t PWM_freq_to_RPM(uint16_t PWM_onperiode)
{
	return ((F_CPU * 60)/(4 * PRESCALER * PWM_onperiode));
     29c:	82 95       	swap	r24
     29e:	92 95       	swap	r25
     2a0:	90 7f       	andi	r25, 0xF0	; 240
     2a2:	98 27       	eor	r25, r24
     2a4:	80 7f       	andi	r24, 0xF0	; 240
     2a6:	98 27       	eor	r25, r24
     2a8:	9c 01       	movw	r18, r24
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e0       	ldi	r21, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	7c e1       	ldi	r23, 0x1C	; 28
     2b2:	8e e4       	ldi	r24, 0x4E	; 78
     2b4:	9e e0       	ldi	r25, 0x0E	; 14
     2b6:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmodsi4>
}
     2ba:	c9 01       	movw	r24, r18
     2bc:	08 95       	ret

000002be <__vector_14>:
	counter ++; // Counter represent seconds
	RTC.PITINTFLAGS = RTC_PI_bm; // Clears the interrupt flag
}
// TCB0 interrupt function
ISR(TCB0_INT_vect)
{
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
     2c8:	0b b6       	in	r0, 0x3b	; 59
     2ca:	0f 92       	push	r0
     2cc:	2f 93       	push	r18
     2ce:	3f 93       	push	r19
     2d0:	4f 93       	push	r20
     2d2:	5f 93       	push	r21
     2d4:	6f 93       	push	r22
     2d6:	7f 93       	push	r23
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
	//TCB0.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
	
	//TCB0.CCMP // holds the compare, capture, and top value
	RPM_fan1= PWM_freq_to_RPM(TCB0.CCMP);
     2e8:	c0 e0       	ldi	r28, 0x00	; 0
     2ea:	db e0       	ldi	r29, 0x0B	; 11
     2ec:	8c 85       	ldd	r24, Y+12	; 0x0c
     2ee:	9d 85       	ldd	r25, Y+13	; 0x0d
     2f0:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_freq_to_RPM>
     2f4:	80 93 1a 41 	sts	0x411A, r24	; 0x80411a <__data_end>
     2f8:	90 93 1b 41 	sts	0x411B, r25	; 0x80411b <__data_end+0x1>
	TCB0.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	8e 83       	std	Y+6, r24	; 0x06
}
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0b be       	out	0x3b, r0	; 59
     320:	0f 90       	pop	r0
     322:	0f be       	out	0x3f, r0	; 63
     324:	0f 90       	pop	r0
     326:	1f 90       	pop	r1
     328:	18 95       	reti

0000032a <__vector_15>:

ISR(TCB1_INT_vect)
{
     32a:	1f 92       	push	r1
     32c:	0f 92       	push	r0
     32e:	0f b6       	in	r0, 0x3f	; 63
     330:	0f 92       	push	r0
     332:	11 24       	eor	r1, r1
     334:	0b b6       	in	r0, 0x3b	; 59
     336:	0f 92       	push	r0
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	ef 93       	push	r30
     352:	ff 93       	push	r31
	//TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
	RPM_fan2= PWM_freq_to_RPM(TCB1.CCMP);
     354:	c0 e1       	ldi	r28, 0x10	; 16
     356:	db e0       	ldi	r29, 0x0B	; 11
     358:	8c 85       	ldd	r24, Y+12	; 0x0c
     35a:	9d 85       	ldd	r25, Y+13	; 0x0d
     35c:	0e 94 4e 01 	call	0x29c	; 0x29c <PWM_freq_to_RPM>
     360:	80 93 1c 41 	sts	0x411C, r24	; 0x80411c <RPM_fan2>
     364:	90 93 1d 41 	sts	0x411D, r25	; 0x80411d <RPM_fan2+0x1>
	TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	8e 83       	std	Y+6, r24	; 0x06
}
     36c:	ff 91       	pop	r31
     36e:	ef 91       	pop	r30
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	bf 91       	pop	r27
     376:	af 91       	pop	r26
     378:	9f 91       	pop	r25
     37a:	8f 91       	pop	r24
     37c:	7f 91       	pop	r23
     37e:	6f 91       	pop	r22
     380:	5f 91       	pop	r21
     382:	4f 91       	pop	r20
     384:	3f 91       	pop	r19
     386:	2f 91       	pop	r18
     388:	0f 90       	pop	r0
     38a:	0b be       	out	0x3b, r0	; 59
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <average_values_for_tach>:
	return ((F_CPU * 60)/(4 * PRESCALER * PWM_onperiode));
}

// Calculating average RPM at max fan speed
FanSpeeds average_values_for_tach()	
{
     396:	4f 92       	push	r4
     398:	5f 92       	push	r5
     39a:	6f 92       	push	r6
     39c:	7f 92       	push	r7
     39e:	8f 92       	push	r8
     3a0:	9f 92       	push	r9
     3a2:	af 92       	push	r10
     3a4:	bf 92       	push	r11
     3a6:	cf 92       	push	r12
     3a8:	df 92       	push	r13
     3aa:	ef 92       	push	r14
     3ac:	ff 92       	push	r15
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
	// SETT DETTE I IF MED FLAGG???
	
	// Set value to all fans
	TCA0.SPLIT.LCMP0 = DUTY_CYCLE_MAX_VALUE;
     3b6:	e0 e0       	ldi	r30, 0x00	; 0
     3b8:	fa e0       	ldi	r31, 0x0A	; 10
     3ba:	87 e2       	ldi	r24, 0x27	; 39
     3bc:	80 a7       	std	Z+40, r24	; 0x28
	TCA0.SPLIT.LCMP1 = DUTY_CYCLE_MAX_VALUE;
     3be:	82 a7       	std	Z+42, r24	; 0x2a
	TCA0.SPLIT.HCMP0 = DUTY_CYCLE_MAX_VALUE;
     3c0:	81 a7       	std	Z+41, r24	; 0x29
	TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MAX_VALUE;
     3c2:	83 a7       	std	Z+43, r24	; 0x2b
	
	printf("Satt vifter! \r\n");
     3c4:	82 e1       	ldi	r24, 0x12	; 18
     3c6:	90 e4       	ldi	r25, 0x40	; 64
     3c8:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
	uint32_t sum_RPM_fan2 = 0;
	uint16_t average_read_value_fan1;
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
	uint16_t compare_counter_time = counter; // reset counter for compare
     3cc:	20 91 1e 41 	lds	r18, 0x411E	; 0x80411e <counter>
     3d0:	30 91 1f 41 	lds	r19, 0x411F	; 0x80411f <counter+0x1>
	
	while (counter - compare_counter_time <= 2)
     3d4:	80 91 1e 41 	lds	r24, 0x411E	; 0x80411e <counter>
     3d8:	90 91 1f 41 	lds	r25, 0x411F	; 0x80411f <counter+0x1>
     3dc:	82 1b       	sub	r24, r18
     3de:	93 0b       	sbc	r25, r19
     3e0:	03 97       	sbiw	r24, 0x03	; 3
     3e2:	c0 f3       	brcs	.-16     	; 0x3d4 <average_values_for_tach+0x3e>
	{
		;
	}
	compare_counter_time = counter;
     3e4:	00 91 1e 41 	lds	r16, 0x411E	; 0x80411e <counter>
     3e8:	10 91 1f 41 	lds	r17, 0x411F	; 0x80411f <counter+0x1>
	uint32_t sum_RPM_fan1 = 0;
	uint32_t sum_RPM_fan2 = 0;
	uint16_t average_read_value_fan1;
	uint16_t average_read_value_fan2;
	
	uint16_t num_of_readings = 0;
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	d0 e0       	ldi	r29, 0x00	; 0
	
	printf("Satt vifter! \r\n");
	
	// For average read values for two fans
	uint32_t sum_RPM_fan1 = 0;
	uint32_t sum_RPM_fan2 = 0;
     3f0:	81 2c       	mov	r8, r1
     3f2:	91 2c       	mov	r9, r1
     3f4:	54 01       	movw	r10, r8
	TCA0.SPLIT.HCMP1 = DUTY_CYCLE_MAX_VALUE;
	
	printf("Satt vifter! \r\n");
	
	// For average read values for two fans
	uint32_t sum_RPM_fan1 = 0;
     3f6:	c1 2c       	mov	r12, r1
     3f8:	d1 2c       	mov	r13, r1
     3fa:	76 01       	movw	r14, r12
	{
		;
	}
	compare_counter_time = counter;
	
	while (counter - compare_counter_time <= 10) 
     3fc:	21 c0       	rjmp	.+66     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
	{
		sum_RPM_fan1 += RPM_fan1;
     3fe:	80 91 1a 41 	lds	r24, 0x411A	; 0x80411a <__data_end>
     402:	90 91 1b 41 	lds	r25, 0x411B	; 0x80411b <__data_end+0x1>
     406:	c8 0e       	add	r12, r24
     408:	d9 1e       	adc	r13, r25
     40a:	e1 1c       	adc	r14, r1
     40c:	f1 1c       	adc	r15, r1
		sum_RPM_fan2 += RPM_fan2;
     40e:	80 91 1c 41 	lds	r24, 0x411C	; 0x80411c <RPM_fan2>
     412:	90 91 1d 41 	lds	r25, 0x411D	; 0x80411d <RPM_fan2+0x1>
     416:	88 0e       	add	r8, r24
     418:	99 1e       	adc	r9, r25
     41a:	a1 1c       	adc	r10, r1
     41c:	b1 1c       	adc	r11, r1
			
		printf("RPM fan 1: %d\r\n", RPM_fan1);
     41e:	80 91 1a 41 	lds	r24, 0x411A	; 0x80411a <__data_end>
     422:	90 91 1b 41 	lds	r25, 0x411B	; 0x80411b <__data_end+0x1>
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	81 e2       	ldi	r24, 0x21	; 33
     42c:	90 e4       	ldi	r25, 0x40	; 64
     42e:	9f 93       	push	r25
     430:	8f 93       	push	r24
     432:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
		num_of_readings ++;
     436:	21 96       	adiw	r28, 0x01	; 1
     438:	0f 90       	pop	r0
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
	{
		;
	}
	compare_counter_time = counter;
	
	while (counter - compare_counter_time <= 10) 
     440:	80 91 1e 41 	lds	r24, 0x411E	; 0x80411e <counter>
     444:	90 91 1f 41 	lds	r25, 0x411F	; 0x80411f <counter+0x1>
     448:	80 1b       	sub	r24, r16
     44a:	91 0b       	sbc	r25, r17
     44c:	0b 97       	sbiw	r24, 0x0b	; 11
     44e:	b8 f2       	brcs	.-82     	; 0x3fe <average_values_for_tach+0x68>
			
		printf("RPM fan 1: %d\r\n", RPM_fan1);
		num_of_readings ++;
	}
	
	average_read_value_fan1 = sum_RPM_fan1 / num_of_readings;
     450:	2e 01       	movw	r4, r28
     452:	61 2c       	mov	r6, r1
     454:	71 2c       	mov	r7, r1
     456:	c7 01       	movw	r24, r14
     458:	b6 01       	movw	r22, r12
     45a:	a3 01       	movw	r20, r6
     45c:	92 01       	movw	r18, r4
     45e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmodsi4>
     462:	69 01       	movw	r12, r18
     464:	7a 01       	movw	r14, r20
	average_read_value_fan2 = sum_RPM_fan2 / num_of_readings;
     466:	c5 01       	movw	r24, r10
     468:	b4 01       	movw	r22, r8
     46a:	a3 01       	movw	r20, r6
     46c:	92 01       	movw	r18, r4
     46e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__udivmodsi4>
     472:	49 01       	movw	r8, r18
     474:	5a 01       	movw	r10, r20
	
 	printf("Number of readings: %d\r\n", num_of_readings);
     476:	df 93       	push	r29
     478:	cf 93       	push	r28
     47a:	81 e3       	ldi	r24, 0x31	; 49
     47c:	90 e4       	ldi	r25, 0x40	; 64
     47e:	9f 93       	push	r25
     480:	8f 93       	push	r24
     482:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	
	FanSpeeds average_read_values;
	average_read_values.fan1 = average_read_value_fan1;
     486:	b6 01       	movw	r22, r12
	average_read_values.fan2 = average_read_value_fan2;
     488:	c4 01       	movw	r24, r8
	
	TCA0.SPLIT.LCMP1 = DUTY_CYCLE_MIN_VALUE;
     48a:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <__TEXT_REGION_LENGTH__+0x7e0a2a>
	
	return average_read_values;
     48e:	0f 90       	pop	r0
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
}
     496:	df 91       	pop	r29
     498:	cf 91       	pop	r28
     49a:	1f 91       	pop	r17
     49c:	0f 91       	pop	r16
     49e:	ff 90       	pop	r15
     4a0:	ef 90       	pop	r14
     4a2:	df 90       	pop	r13
     4a4:	cf 90       	pop	r12
     4a6:	bf 90       	pop	r11
     4a8:	af 90       	pop	r10
     4aa:	9f 90       	pop	r9
     4ac:	8f 90       	pop	r8
     4ae:	7f 90       	pop	r7
     4b0:	6f 90       	pop	r6
     4b2:	5f 90       	pop	r5
     4b4:	4f 90       	pop	r4
     4b6:	08 95       	ret

000004b8 <alarm>:
	
}

uint8_t alarm(uint8_t percentage)
{
	if (percentage < 90)
     4b8:	8a 35       	cpi	r24, 0x5A	; 90
     4ba:	10 f4       	brcc	.+4      	; 0x4c0 <alarm+0x8>
	{
		return 1;
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	08 95       	ret
	}
	else
	{
		return 0;
     4c0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     4c2:	08 95       	ret

000004c4 <calculate_percentage>:

uint8_t calculate_percentage(float old_value, uint16_t current_value)
{
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
	return (current_value / old_value) * 100.0;
     4d0:	ba 01       	movw	r22, r20
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 13 04 	call	0x826	; 0x826 <__floatunsisf>
     4da:	a7 01       	movw	r20, r14
     4dc:	96 01       	movw	r18, r12
     4de:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__divsf3>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	48 ec       	ldi	r20, 0xC8	; 200
     4e8:	52 e4       	ldi	r21, 0x42	; 66
     4ea:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     4ee:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fixunssfsi>
     4f2:	86 2f       	mov	r24, r22
}
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	08 95       	ret

000004fe <predict_error>:
	return average_read_values;
}

// Predicting failures with fans
void predict_error()
{
     4fe:	cf 92       	push	r12
     500:	df 92       	push	r13
     502:	ef 92       	push	r14
     504:	ff 92       	push	r15
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	
	
	// Local struct for current RPM speeds fan1 and fan2
	FanSpeeds current_RPM_values;
	// Call function to get the average fan speeds and save in variables
	current_RPM_values = average_values_for_tach();
     50e:	0e 94 cb 01 	call	0x396	; 0x396 <average_values_for_tach>
     512:	c6 2e       	mov	r12, r22
     514:	d7 2e       	mov	r13, r23
     516:	08 2f       	mov	r16, r24
     518:	19 2f       	mov	r17, r25
	uint16_t current_RPM_value_fan1 = current_RPM_values.fan1;
	uint16_t current_RPM_value_fan2 = current_RPM_values.fan2;
	
	printf("Gjennomsnitt fan 1: %d\r\n", current_RPM_value_fan1);
     51a:	7f 93       	push	r23
     51c:	6f 93       	push	r22
     51e:	8a e4       	ldi	r24, 0x4A	; 74
     520:	90 e4       	ldi	r25, 0x40	; 64
     522:	9f 93       	push	r25
     524:	8f 93       	push	r24
     526:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	printf("Gjennomsnitt fan 2: %d\r\n", current_RPM_value_fan2);
     52a:	1f 93       	push	r17
     52c:	0f 93       	push	r16
     52e:	83 e6       	ldi	r24, 0x63	; 99
     530:	90 e4       	ldi	r25, 0x40	; 64
     532:	9f 93       	push	r25
     534:	8f 93       	push	r24
     536:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	printf("\r\n");
     53a:	88 ee       	ldi	r24, 0xE8	; 232
     53c:	90 e4       	ldi	r25, 0x40	; 64
     53e:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
	printf("\r\n");
     542:	88 ee       	ldi	r24, 0xE8	; 232
     544:	90 e4       	ldi	r25, 0x40	; 64
     546:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
	
	uint16_t  old_value_fan1 = new_fan_RPM_fan1;
     54a:	c0 91 10 40 	lds	r28, 0x4010	; 0x804010 <new_fan_RPM_fan1>
     54e:	d0 91 11 40 	lds	r29, 0x4011	; 0x804011 <new_fan_RPM_fan1+0x1>
	uint16_t  old_value_fan2 = new_fan_RPM_fan2;
     552:	e0 90 0e 40 	lds	r14, 0x400E	; 0x80400e <new_fan_RPM_fan2>
     556:	f0 90 0f 40 	lds	r15, 0x400F	; 0x80400f <new_fan_RPM_fan2+0x1>
	printf("old fan 2: %d\r\n", old_value_fan1);
     55a:	df 93       	push	r29
     55c:	cf 93       	push	r28
     55e:	8c e7       	ldi	r24, 0x7C	; 124
     560:	90 e4       	ldi	r25, 0x40	; 64
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	
	// Formula for prediction of error
	uint8_t percentage_to_compare_fan1 = calculate_percentage(old_value_fan1, current_RPM_value_fan1); // send old value and atm value
     56a:	be 01       	movw	r22, r28
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 13 04 	call	0x826	; 0x826 <__floatunsisf>
     574:	4c 2d       	mov	r20, r12
     576:	5d 2d       	mov	r21, r13
     578:	0e 94 62 02 	call	0x4c4	; 0x4c4 <calculate_percentage>
     57c:	d8 2f       	mov	r29, r24
	uint8_t percentage_to_compare_fan2 = calculate_percentage(old_value_fan2, current_RPM_value_fan2); // send old value and atm value
     57e:	b7 01       	movw	r22, r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 13 04 	call	0x826	; 0x826 <__floatunsisf>
     588:	40 2f       	mov	r20, r16
     58a:	51 2f       	mov	r21, r17
     58c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <calculate_percentage>
     590:	c8 2f       	mov	r28, r24
	
	// For testing
	printf("PROSENT fan 1: %d\r\n", percentage_to_compare_fan1);
     592:	1f 92       	push	r1
     594:	df 93       	push	r29
     596:	8c e8       	ldi	r24, 0x8C	; 140
     598:	90 e4       	ldi	r25, 0x40	; 64
     59a:	9f 93       	push	r25
     59c:	8f 93       	push	r24
     59e:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	printf("PROSENT fan 2: %d\r\n", percentage_to_compare_fan2);
     5a2:	1f 92       	push	r1
     5a4:	cf 93       	push	r28
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	90 e4       	ldi	r25, 0x40	; 64
     5aa:	9f 93       	push	r25
     5ac:	8f 93       	push	r24
     5ae:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	
	// Under 90% set of a alarm
	uint8_t fan1_status =  alarm(percentage_to_compare_fan1);
     5b2:	8d 2f       	mov	r24, r29
     5b4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <alarm>
     5b8:	d8 2f       	mov	r29, r24
	uint8_t fan2_status = alarm(percentage_to_compare_fan2);
     5ba:	8c 2f       	mov	r24, r28
     5bc:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <alarm>
     5c0:	c8 2f       	mov	r28, r24
	// For testing
	printf("STATUS fan 1: %d\r\n", fan1_status);
     5c2:	1f 92       	push	r1
     5c4:	df 93       	push	r29
     5c6:	84 eb       	ldi	r24, 0xB4	; 180
     5c8:	90 e4       	ldi	r25, 0x40	; 64
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	printf("STATUS fan 2: %d\r\n", fan2_status);
     5d2:	1f 92       	push	r1
     5d4:	cf 93       	push	r28
     5d6:	87 ec       	ldi	r24, 0xC7	; 199
     5d8:	90 e4       	ldi	r25, 0x40	; 64
     5da:	9f 93       	push	r25
     5dc:	8f 93       	push	r24
     5de:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
	
	if (fan1_status == 1)
     5e2:	8d b7       	in	r24, 0x3d	; 61
     5e4:	9e b7       	in	r25, 0x3e	; 62
     5e6:	4c 96       	adiw	r24, 0x1c	; 28
     5e8:	8d bf       	out	0x3d, r24	; 61
     5ea:	9e bf       	out	0x3e, r25	; 62
     5ec:	d1 30       	cpi	r29, 0x01	; 1
     5ee:	21 f4       	brne	.+8      	; 0x5f8 <predict_error+0xfa>
	{
		// What alarm do we want?
		printf("ALARM fan 1!! \r\n");
     5f0:	8a ed       	ldi	r24, 0xDA	; 218
     5f2:	90 e4       	ldi	r25, 0x40	; 64
     5f4:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
		
	}
	if (fan2_status == 1)
     5f8:	c1 30       	cpi	r28, 0x01	; 1
     5fa:	21 f4       	brne	.+8      	; 0x604 <predict_error+0x106>
	{
		//what alarm do we want?
		printf("ALARM fan 2!! \r\n");
     5fc:	8a ee       	ldi	r24, 0xEA	; 234
     5fe:	90 e4       	ldi	r25, 0x40	; 64
     600:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
	}
	
	// Updates the short term value to predict instant failure
	new_fan_RPM_fan1 = current_RPM_value_fan1;
     604:	c0 92 10 40 	sts	0x4010, r12	; 0x804010 <new_fan_RPM_fan1>
     608:	d0 92 11 40 	sts	0x4011, r13	; 0x804011 <new_fan_RPM_fan1+0x1>
	new_fan_RPM_fan2 = current_RPM_value_fan2;
     60c:	00 93 0e 40 	sts	0x400E, r16	; 0x80400e <new_fan_RPM_fan2>
     610:	10 93 0f 40 	sts	0x400F, r17	; 0x80400f <new_fan_RPM_fan2+0x1>
	
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <main>:
	TCB1.INTFLAGS = TCB_CAPT_bm; // Clear the interrupt flag
}

int main(void)
{
	file_stream();  // Create file stream for USART
     626:	0e 94 12 01 	call	0x224	; 0x224 <file_stream>
	USART3_init();	// USART3 initialize
     62a:	0e 94 19 01 	call	0x232	; 0x232 <USART3_init>
	
	// PWM initialize
	TCA0_init();
     62e:	0e 94 a2 00 	call	0x144	; 0x144 <TCA0_init>
	TCB0_init();
     632:	0e 94 b9 00 	call	0x172	; 0x172 <TCB0_init>
	TCB1_init();
     636:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <TCB1_init>
	
	// ADC initialize
	ADC0_init();
     63a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <ADC0_init>
	ADC0_start();
     63e:	0e 94 0a 01 	call	0x214	; 0x214 <ADC0_start>
	
	// RTC initialize
	RTC_init();
     642:	0e 94 2b 01 	call	0x256	; 0x256 <RTC_init>
	
	sei(); // Enable Global Interrupts
     646:	78 94       	sei
	
	while (1)
	{
		// Update this value to 3600, 1 hour
		if(counter == 20)
     648:	80 91 1e 41 	lds	r24, 0x411E	; 0x80411e <counter>
     64c:	90 91 1f 41 	lds	r25, 0x411F	; 0x80411f <counter+0x1>
     650:	44 97       	sbiw	r24, 0x14	; 20
     652:	31 f4       	brne	.+12     	; 0x660 <main+0x3a>
		{
			predict_error();
     654:	0e 94 7f 02 	call	0x4fe	; 0x4fe <predict_error>
			//average_values_for_tach();
			counter = 0;
     658:	10 92 1e 41 	sts	0x411E, r1	; 0x80411e <counter>
     65c:	10 92 1f 41 	sts	0x411F, r1	; 0x80411f <counter+0x1>
		}
		if (ADC0_conersionDone())
     660:	0e 94 0e 01 	call	0x21c	; 0x21c <ADC0_conersionDone>
     664:	88 23       	and	r24, r24
     666:	81 f3       	breq	.-32     	; 0x648 <main+0x22>
		{
			// Read potentiometer
			uint16_t adc_value = ADC0_read();
     668:	0e 94 03 01 	call	0x206	; 0x206 <ADC0_read>
     66c:	ec 01       	movw	r28, r24
			// Convert ADC-value to PWM signal
			uint16_t fanSpeed = ((39.0/1023.0)*adc_value);
     66e:	bc 01       	movw	r22, r24
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 13 04 	call	0x826	; 0x826 <__floatunsisf>
     678:	2a e0       	ldi	r18, 0x0A	; 10
     67a:	37 e2       	ldi	r19, 0x27	; 39
     67c:	4c e1       	ldi	r20, 0x1C	; 28
     67e:	5d e3       	ldi	r21, 0x3D	; 61
     680:	0e 94 a1 04 	call	0x942	; 0x942 <__mulsf3>
     684:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__fixunssfsi>
     688:	16 2f       	mov	r17, r22
     68a:	07 2f       	mov	r16, r23
			printf("ADC Value: %d\r\n", adc_value);
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	8a ef       	ldi	r24, 0xFA	; 250
     692:	90 e4       	ldi	r25, 0x40	; 64
     694:	9f 93       	push	r25
     696:	8f 93       	push	r24
     698:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
			printf("Fan speed: %d\r\n", fanSpeed);
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	8a e0       	ldi	r24, 0x0A	; 10
     6a2:	91 e4       	ldi	r25, 0x41	; 65
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
			printf("RPM fan 1: %d\r\n", RPM_fan1);
     6ac:	80 91 1a 41 	lds	r24, 0x411A	; 0x80411a <__data_end>
     6b0:	90 91 1b 41 	lds	r25, 0x411B	; 0x80411b <__data_end+0x1>
     6b4:	9f 93       	push	r25
     6b6:	8f 93       	push	r24
     6b8:	81 e2       	ldi	r24, 0x21	; 33
     6ba:	90 e4       	ldi	r25, 0x40	; 64
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	0e 94 30 05 	call	0xa60	; 0xa60 <printf>
			printf("\r\n");
     6c4:	88 ee       	ldi	r24, 0xE8	; 232
     6c6:	90 e4       	ldi	r25, 0x40	; 64
     6c8:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
			printf("\r\n");
     6cc:	88 ee       	ldi	r24, 0xE8	; 232
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	0e 94 44 05 	call	0xa88	; 0xa88 <puts>
			
			TCA0.SPLIT.LCMP0 = fanSpeed;
     6d4:	10 93 28 0a 	sts	0x0A28, r17	; 0x800a28 <__TEXT_REGION_LENGTH__+0x7e0a28>
     6d8:	8d b7       	in	r24, 0x3d	; 61
     6da:	9e b7       	in	r25, 0x3e	; 62
     6dc:	0c 96       	adiw	r24, 0x0c	; 12
     6de:	8d bf       	out	0x3d, r24	; 61
     6e0:	9e bf       	out	0x3e, r25	; 62
     6e2:	b2 cf       	rjmp	.-156    	; 0x648 <main+0x22>

000006e4 <__divsf3>:
     6e4:	0e 94 86 03 	call	0x70c	; 0x70c <__divsf3x>
     6e8:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_round>
     6ec:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscB>
     6f0:	58 f0       	brcs	.+22     	; 0x708 <__divsf3+0x24>
     6f2:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_pscA>
     6f6:	40 f0       	brcs	.+16     	; 0x708 <__divsf3+0x24>
     6f8:	29 f4       	brne	.+10     	; 0x704 <__divsf3+0x20>
     6fa:	5f 3f       	cpi	r21, 0xFF	; 255
     6fc:	29 f0       	breq	.+10     	; 0x708 <__divsf3+0x24>
     6fe:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
     702:	51 11       	cpse	r21, r1
     704:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_szero>
     708:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_nan>

0000070c <__divsf3x>:
     70c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_split3>
     710:	68 f3       	brcs	.-38     	; 0x6ec <__divsf3+0x8>

00000712 <__divsf3_pse>:
     712:	99 23       	and	r25, r25
     714:	b1 f3       	breq	.-20     	; 0x702 <__divsf3+0x1e>
     716:	55 23       	and	r21, r21
     718:	91 f3       	breq	.-28     	; 0x6fe <__divsf3+0x1a>
     71a:	95 1b       	sub	r25, r21
     71c:	55 0b       	sbc	r21, r21
     71e:	bb 27       	eor	r27, r27
     720:	aa 27       	eor	r26, r26
     722:	62 17       	cp	r22, r18
     724:	73 07       	cpc	r23, r19
     726:	84 07       	cpc	r24, r20
     728:	38 f0       	brcs	.+14     	; 0x738 <__divsf3_pse+0x26>
     72a:	9f 5f       	subi	r25, 0xFF	; 255
     72c:	5f 4f       	sbci	r21, 0xFF	; 255
     72e:	22 0f       	add	r18, r18
     730:	33 1f       	adc	r19, r19
     732:	44 1f       	adc	r20, r20
     734:	aa 1f       	adc	r26, r26
     736:	a9 f3       	breq	.-22     	; 0x722 <__divsf3_pse+0x10>
     738:	35 d0       	rcall	.+106    	; 0x7a4 <__divsf3_pse+0x92>
     73a:	0e 2e       	mov	r0, r30
     73c:	3a f0       	brmi	.+14     	; 0x74c <__divsf3_pse+0x3a>
     73e:	e0 e8       	ldi	r30, 0x80	; 128
     740:	32 d0       	rcall	.+100    	; 0x7a6 <__divsf3_pse+0x94>
     742:	91 50       	subi	r25, 0x01	; 1
     744:	50 40       	sbci	r21, 0x00	; 0
     746:	e6 95       	lsr	r30
     748:	00 1c       	adc	r0, r0
     74a:	ca f7       	brpl	.-14     	; 0x73e <__divsf3_pse+0x2c>
     74c:	2b d0       	rcall	.+86     	; 0x7a4 <__divsf3_pse+0x92>
     74e:	fe 2f       	mov	r31, r30
     750:	29 d0       	rcall	.+82     	; 0x7a4 <__divsf3_pse+0x92>
     752:	66 0f       	add	r22, r22
     754:	77 1f       	adc	r23, r23
     756:	88 1f       	adc	r24, r24
     758:	bb 1f       	adc	r27, r27
     75a:	26 17       	cp	r18, r22
     75c:	37 07       	cpc	r19, r23
     75e:	48 07       	cpc	r20, r24
     760:	ab 07       	cpc	r26, r27
     762:	b0 e8       	ldi	r27, 0x80	; 128
     764:	09 f0       	breq	.+2      	; 0x768 <__divsf3_pse+0x56>
     766:	bb 0b       	sbc	r27, r27
     768:	80 2d       	mov	r24, r0
     76a:	bf 01       	movw	r22, r30
     76c:	ff 27       	eor	r31, r31
     76e:	93 58       	subi	r25, 0x83	; 131
     770:	5f 4f       	sbci	r21, 0xFF	; 255
     772:	3a f0       	brmi	.+14     	; 0x782 <__divsf3_pse+0x70>
     774:	9e 3f       	cpi	r25, 0xFE	; 254
     776:	51 05       	cpc	r21, r1
     778:	78 f0       	brcs	.+30     	; 0x798 <__divsf3_pse+0x86>
     77a:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
     77e:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_szero>
     782:	5f 3f       	cpi	r21, 0xFF	; 255
     784:	e4 f3       	brlt	.-8      	; 0x77e <__divsf3_pse+0x6c>
     786:	98 3e       	cpi	r25, 0xE8	; 232
     788:	d4 f3       	brlt	.-12     	; 0x77e <__divsf3_pse+0x6c>
     78a:	86 95       	lsr	r24
     78c:	77 95       	ror	r23
     78e:	67 95       	ror	r22
     790:	b7 95       	ror	r27
     792:	f7 95       	ror	r31
     794:	9f 5f       	subi	r25, 0xFF	; 255
     796:	c9 f7       	brne	.-14     	; 0x78a <__divsf3_pse+0x78>
     798:	88 0f       	add	r24, r24
     79a:	91 1d       	adc	r25, r1
     79c:	96 95       	lsr	r25
     79e:	87 95       	ror	r24
     7a0:	97 f9       	bld	r25, 7
     7a2:	08 95       	ret
     7a4:	e1 e0       	ldi	r30, 0x01	; 1
     7a6:	66 0f       	add	r22, r22
     7a8:	77 1f       	adc	r23, r23
     7aa:	88 1f       	adc	r24, r24
     7ac:	bb 1f       	adc	r27, r27
     7ae:	62 17       	cp	r22, r18
     7b0:	73 07       	cpc	r23, r19
     7b2:	84 07       	cpc	r24, r20
     7b4:	ba 07       	cpc	r27, r26
     7b6:	20 f0       	brcs	.+8      	; 0x7c0 <__divsf3_pse+0xae>
     7b8:	62 1b       	sub	r22, r18
     7ba:	73 0b       	sbc	r23, r19
     7bc:	84 0b       	sbc	r24, r20
     7be:	ba 0b       	sbc	r27, r26
     7c0:	ee 1f       	adc	r30, r30
     7c2:	88 f7       	brcc	.-30     	; 0x7a6 <__divsf3_pse+0x94>
     7c4:	e0 95       	com	r30
     7c6:	08 95       	ret

000007c8 <__fixunssfsi>:
     7c8:	0e 94 80 04 	call	0x900	; 0x900 <__fp_splitA>
     7cc:	88 f0       	brcs	.+34     	; 0x7f0 <__fixunssfsi+0x28>
     7ce:	9f 57       	subi	r25, 0x7F	; 127
     7d0:	98 f0       	brcs	.+38     	; 0x7f8 <__fixunssfsi+0x30>
     7d2:	b9 2f       	mov	r27, r25
     7d4:	99 27       	eor	r25, r25
     7d6:	b7 51       	subi	r27, 0x17	; 23
     7d8:	b0 f0       	brcs	.+44     	; 0x806 <__fixunssfsi+0x3e>
     7da:	e1 f0       	breq	.+56     	; 0x814 <__fixunssfsi+0x4c>
     7dc:	66 0f       	add	r22, r22
     7de:	77 1f       	adc	r23, r23
     7e0:	88 1f       	adc	r24, r24
     7e2:	99 1f       	adc	r25, r25
     7e4:	1a f0       	brmi	.+6      	; 0x7ec <__fixunssfsi+0x24>
     7e6:	ba 95       	dec	r27
     7e8:	c9 f7       	brne	.-14     	; 0x7dc <__fixunssfsi+0x14>
     7ea:	14 c0       	rjmp	.+40     	; 0x814 <__fixunssfsi+0x4c>
     7ec:	b1 30       	cpi	r27, 0x01	; 1
     7ee:	91 f0       	breq	.+36     	; 0x814 <__fixunssfsi+0x4c>
     7f0:	0e 94 9a 04 	call	0x934	; 0x934 <__fp_zero>
     7f4:	b1 e0       	ldi	r27, 0x01	; 1
     7f6:	08 95       	ret
     7f8:	0c 94 9a 04 	jmp	0x934	; 0x934 <__fp_zero>
     7fc:	67 2f       	mov	r22, r23
     7fe:	78 2f       	mov	r23, r24
     800:	88 27       	eor	r24, r24
     802:	b8 5f       	subi	r27, 0xF8	; 248
     804:	39 f0       	breq	.+14     	; 0x814 <__fixunssfsi+0x4c>
     806:	b9 3f       	cpi	r27, 0xF9	; 249
     808:	cc f3       	brlt	.-14     	; 0x7fc <__fixunssfsi+0x34>
     80a:	86 95       	lsr	r24
     80c:	77 95       	ror	r23
     80e:	67 95       	ror	r22
     810:	b3 95       	inc	r27
     812:	d9 f7       	brne	.-10     	; 0x80a <__fixunssfsi+0x42>
     814:	3e f4       	brtc	.+14     	; 0x824 <__fixunssfsi+0x5c>
     816:	90 95       	com	r25
     818:	80 95       	com	r24
     81a:	70 95       	com	r23
     81c:	61 95       	neg	r22
     81e:	7f 4f       	sbci	r23, 0xFF	; 255
     820:	8f 4f       	sbci	r24, 0xFF	; 255
     822:	9f 4f       	sbci	r25, 0xFF	; 255
     824:	08 95       	ret

00000826 <__floatunsisf>:
     826:	e8 94       	clt
     828:	09 c0       	rjmp	.+18     	; 0x83c <__floatsisf+0x12>

0000082a <__floatsisf>:
     82a:	97 fb       	bst	r25, 7
     82c:	3e f4       	brtc	.+14     	; 0x83c <__floatsisf+0x12>
     82e:	90 95       	com	r25
     830:	80 95       	com	r24
     832:	70 95       	com	r23
     834:	61 95       	neg	r22
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	8f 4f       	sbci	r24, 0xFF	; 255
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	99 23       	and	r25, r25
     83e:	a9 f0       	breq	.+42     	; 0x86a <__floatsisf+0x40>
     840:	f9 2f       	mov	r31, r25
     842:	96 e9       	ldi	r25, 0x96	; 150
     844:	bb 27       	eor	r27, r27
     846:	93 95       	inc	r25
     848:	f6 95       	lsr	r31
     84a:	87 95       	ror	r24
     84c:	77 95       	ror	r23
     84e:	67 95       	ror	r22
     850:	b7 95       	ror	r27
     852:	f1 11       	cpse	r31, r1
     854:	f8 cf       	rjmp	.-16     	; 0x846 <__floatsisf+0x1c>
     856:	fa f4       	brpl	.+62     	; 0x896 <__floatsisf+0x6c>
     858:	bb 0f       	add	r27, r27
     85a:	11 f4       	brne	.+4      	; 0x860 <__floatsisf+0x36>
     85c:	60 ff       	sbrs	r22, 0
     85e:	1b c0       	rjmp	.+54     	; 0x896 <__floatsisf+0x6c>
     860:	6f 5f       	subi	r22, 0xFF	; 255
     862:	7f 4f       	sbci	r23, 0xFF	; 255
     864:	8f 4f       	sbci	r24, 0xFF	; 255
     866:	9f 4f       	sbci	r25, 0xFF	; 255
     868:	16 c0       	rjmp	.+44     	; 0x896 <__floatsisf+0x6c>
     86a:	88 23       	and	r24, r24
     86c:	11 f0       	breq	.+4      	; 0x872 <__floatsisf+0x48>
     86e:	96 e9       	ldi	r25, 0x96	; 150
     870:	11 c0       	rjmp	.+34     	; 0x894 <__floatsisf+0x6a>
     872:	77 23       	and	r23, r23
     874:	21 f0       	breq	.+8      	; 0x87e <__floatsisf+0x54>
     876:	9e e8       	ldi	r25, 0x8E	; 142
     878:	87 2f       	mov	r24, r23
     87a:	76 2f       	mov	r23, r22
     87c:	05 c0       	rjmp	.+10     	; 0x888 <__floatsisf+0x5e>
     87e:	66 23       	and	r22, r22
     880:	71 f0       	breq	.+28     	; 0x89e <__floatsisf+0x74>
     882:	96 e8       	ldi	r25, 0x86	; 134
     884:	86 2f       	mov	r24, r22
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	2a f0       	brmi	.+10     	; 0x896 <__floatsisf+0x6c>
     88c:	9a 95       	dec	r25
     88e:	66 0f       	add	r22, r22
     890:	77 1f       	adc	r23, r23
     892:	88 1f       	adc	r24, r24
     894:	da f7       	brpl	.-10     	; 0x88c <__floatsisf+0x62>
     896:	88 0f       	add	r24, r24
     898:	96 95       	lsr	r25
     89a:	87 95       	ror	r24
     89c:	97 f9       	bld	r25, 7
     89e:	08 95       	ret

000008a0 <__fp_inf>:
     8a0:	97 f9       	bld	r25, 7
     8a2:	9f 67       	ori	r25, 0x7F	; 127
     8a4:	80 e8       	ldi	r24, 0x80	; 128
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	60 e0       	ldi	r22, 0x00	; 0
     8aa:	08 95       	ret

000008ac <__fp_nan>:
     8ac:	9f ef       	ldi	r25, 0xFF	; 255
     8ae:	80 ec       	ldi	r24, 0xC0	; 192
     8b0:	08 95       	ret

000008b2 <__fp_pscA>:
     8b2:	00 24       	eor	r0, r0
     8b4:	0a 94       	dec	r0
     8b6:	16 16       	cp	r1, r22
     8b8:	17 06       	cpc	r1, r23
     8ba:	18 06       	cpc	r1, r24
     8bc:	09 06       	cpc	r0, r25
     8be:	08 95       	ret

000008c0 <__fp_pscB>:
     8c0:	00 24       	eor	r0, r0
     8c2:	0a 94       	dec	r0
     8c4:	12 16       	cp	r1, r18
     8c6:	13 06       	cpc	r1, r19
     8c8:	14 06       	cpc	r1, r20
     8ca:	05 06       	cpc	r0, r21
     8cc:	08 95       	ret

000008ce <__fp_round>:
     8ce:	09 2e       	mov	r0, r25
     8d0:	03 94       	inc	r0
     8d2:	00 0c       	add	r0, r0
     8d4:	11 f4       	brne	.+4      	; 0x8da <__fp_round+0xc>
     8d6:	88 23       	and	r24, r24
     8d8:	52 f0       	brmi	.+20     	; 0x8ee <__fp_round+0x20>
     8da:	bb 0f       	add	r27, r27
     8dc:	40 f4       	brcc	.+16     	; 0x8ee <__fp_round+0x20>
     8de:	bf 2b       	or	r27, r31
     8e0:	11 f4       	brne	.+4      	; 0x8e6 <__fp_round+0x18>
     8e2:	60 ff       	sbrs	r22, 0
     8e4:	04 c0       	rjmp	.+8      	; 0x8ee <__fp_round+0x20>
     8e6:	6f 5f       	subi	r22, 0xFF	; 255
     8e8:	7f 4f       	sbci	r23, 0xFF	; 255
     8ea:	8f 4f       	sbci	r24, 0xFF	; 255
     8ec:	9f 4f       	sbci	r25, 0xFF	; 255
     8ee:	08 95       	ret

000008f0 <__fp_split3>:
     8f0:	57 fd       	sbrc	r21, 7
     8f2:	90 58       	subi	r25, 0x80	; 128
     8f4:	44 0f       	add	r20, r20
     8f6:	55 1f       	adc	r21, r21
     8f8:	59 f0       	breq	.+22     	; 0x910 <__fp_splitA+0x10>
     8fa:	5f 3f       	cpi	r21, 0xFF	; 255
     8fc:	71 f0       	breq	.+28     	; 0x91a <__fp_splitA+0x1a>
     8fe:	47 95       	ror	r20

00000900 <__fp_splitA>:
     900:	88 0f       	add	r24, r24
     902:	97 fb       	bst	r25, 7
     904:	99 1f       	adc	r25, r25
     906:	61 f0       	breq	.+24     	; 0x920 <__fp_splitA+0x20>
     908:	9f 3f       	cpi	r25, 0xFF	; 255
     90a:	79 f0       	breq	.+30     	; 0x92a <__fp_splitA+0x2a>
     90c:	87 95       	ror	r24
     90e:	08 95       	ret
     910:	12 16       	cp	r1, r18
     912:	13 06       	cpc	r1, r19
     914:	14 06       	cpc	r1, r20
     916:	55 1f       	adc	r21, r21
     918:	f2 cf       	rjmp	.-28     	; 0x8fe <__fp_split3+0xe>
     91a:	46 95       	lsr	r20
     91c:	f1 df       	rcall	.-30     	; 0x900 <__fp_splitA>
     91e:	08 c0       	rjmp	.+16     	; 0x930 <__fp_splitA+0x30>
     920:	16 16       	cp	r1, r22
     922:	17 06       	cpc	r1, r23
     924:	18 06       	cpc	r1, r24
     926:	99 1f       	adc	r25, r25
     928:	f1 cf       	rjmp	.-30     	; 0x90c <__fp_splitA+0xc>
     92a:	86 95       	lsr	r24
     92c:	71 05       	cpc	r23, r1
     92e:	61 05       	cpc	r22, r1
     930:	08 94       	sec
     932:	08 95       	ret

00000934 <__fp_zero>:
     934:	e8 94       	clt

00000936 <__fp_szero>:
     936:	bb 27       	eor	r27, r27
     938:	66 27       	eor	r22, r22
     93a:	77 27       	eor	r23, r23
     93c:	cb 01       	movw	r24, r22
     93e:	97 f9       	bld	r25, 7
     940:	08 95       	ret

00000942 <__mulsf3>:
     942:	0e 94 b4 04 	call	0x968	; 0x968 <__mulsf3x>
     946:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <__fp_round>
     94a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_pscA>
     94e:	38 f0       	brcs	.+14     	; 0x95e <__mulsf3+0x1c>
     950:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__fp_pscB>
     954:	20 f0       	brcs	.+8      	; 0x95e <__mulsf3+0x1c>
     956:	95 23       	and	r25, r21
     958:	11 f0       	breq	.+4      	; 0x95e <__mulsf3+0x1c>
     95a:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
     95e:	0c 94 56 04 	jmp	0x8ac	; 0x8ac <__fp_nan>
     962:	11 24       	eor	r1, r1
     964:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_szero>

00000968 <__mulsf3x>:
     968:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_split3>
     96c:	70 f3       	brcs	.-36     	; 0x94a <__mulsf3+0x8>

0000096e <__mulsf3_pse>:
     96e:	95 9f       	mul	r25, r21
     970:	c1 f3       	breq	.-16     	; 0x962 <__mulsf3+0x20>
     972:	95 0f       	add	r25, r21
     974:	50 e0       	ldi	r21, 0x00	; 0
     976:	55 1f       	adc	r21, r21
     978:	62 9f       	mul	r22, r18
     97a:	f0 01       	movw	r30, r0
     97c:	72 9f       	mul	r23, r18
     97e:	bb 27       	eor	r27, r27
     980:	f0 0d       	add	r31, r0
     982:	b1 1d       	adc	r27, r1
     984:	63 9f       	mul	r22, r19
     986:	aa 27       	eor	r26, r26
     988:	f0 0d       	add	r31, r0
     98a:	b1 1d       	adc	r27, r1
     98c:	aa 1f       	adc	r26, r26
     98e:	64 9f       	mul	r22, r20
     990:	66 27       	eor	r22, r22
     992:	b0 0d       	add	r27, r0
     994:	a1 1d       	adc	r26, r1
     996:	66 1f       	adc	r22, r22
     998:	82 9f       	mul	r24, r18
     99a:	22 27       	eor	r18, r18
     99c:	b0 0d       	add	r27, r0
     99e:	a1 1d       	adc	r26, r1
     9a0:	62 1f       	adc	r22, r18
     9a2:	73 9f       	mul	r23, r19
     9a4:	b0 0d       	add	r27, r0
     9a6:	a1 1d       	adc	r26, r1
     9a8:	62 1f       	adc	r22, r18
     9aa:	83 9f       	mul	r24, r19
     9ac:	a0 0d       	add	r26, r0
     9ae:	61 1d       	adc	r22, r1
     9b0:	22 1f       	adc	r18, r18
     9b2:	74 9f       	mul	r23, r20
     9b4:	33 27       	eor	r19, r19
     9b6:	a0 0d       	add	r26, r0
     9b8:	61 1d       	adc	r22, r1
     9ba:	23 1f       	adc	r18, r19
     9bc:	84 9f       	mul	r24, r20
     9be:	60 0d       	add	r22, r0
     9c0:	21 1d       	adc	r18, r1
     9c2:	82 2f       	mov	r24, r18
     9c4:	76 2f       	mov	r23, r22
     9c6:	6a 2f       	mov	r22, r26
     9c8:	11 24       	eor	r1, r1
     9ca:	9f 57       	subi	r25, 0x7F	; 127
     9cc:	50 40       	sbci	r21, 0x00	; 0
     9ce:	9a f0       	brmi	.+38     	; 0x9f6 <__mulsf3_pse+0x88>
     9d0:	f1 f0       	breq	.+60     	; 0xa0e <__mulsf3_pse+0xa0>
     9d2:	88 23       	and	r24, r24
     9d4:	4a f0       	brmi	.+18     	; 0x9e8 <__mulsf3_pse+0x7a>
     9d6:	ee 0f       	add	r30, r30
     9d8:	ff 1f       	adc	r31, r31
     9da:	bb 1f       	adc	r27, r27
     9dc:	66 1f       	adc	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	88 1f       	adc	r24, r24
     9e2:	91 50       	subi	r25, 0x01	; 1
     9e4:	50 40       	sbci	r21, 0x00	; 0
     9e6:	a9 f7       	brne	.-22     	; 0x9d2 <__mulsf3_pse+0x64>
     9e8:	9e 3f       	cpi	r25, 0xFE	; 254
     9ea:	51 05       	cpc	r21, r1
     9ec:	80 f0       	brcs	.+32     	; 0xa0e <__mulsf3_pse+0xa0>
     9ee:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__fp_inf>
     9f2:	0c 94 9b 04 	jmp	0x936	; 0x936 <__fp_szero>
     9f6:	5f 3f       	cpi	r21, 0xFF	; 255
     9f8:	e4 f3       	brlt	.-8      	; 0x9f2 <__mulsf3_pse+0x84>
     9fa:	98 3e       	cpi	r25, 0xE8	; 232
     9fc:	d4 f3       	brlt	.-12     	; 0x9f2 <__mulsf3_pse+0x84>
     9fe:	86 95       	lsr	r24
     a00:	77 95       	ror	r23
     a02:	67 95       	ror	r22
     a04:	b7 95       	ror	r27
     a06:	f7 95       	ror	r31
     a08:	e7 95       	ror	r30
     a0a:	9f 5f       	subi	r25, 0xFF	; 255
     a0c:	c1 f7       	brne	.-16     	; 0x9fe <__mulsf3_pse+0x90>
     a0e:	fe 2b       	or	r31, r30
     a10:	88 0f       	add	r24, r24
     a12:	91 1d       	adc	r25, r1
     a14:	96 95       	lsr	r25
     a16:	87 95       	ror	r24
     a18:	97 f9       	bld	r25, 7
     a1a:	08 95       	ret

00000a1c <__udivmodsi4>:
     a1c:	a1 e2       	ldi	r26, 0x21	; 33
     a1e:	1a 2e       	mov	r1, r26
     a20:	aa 1b       	sub	r26, r26
     a22:	bb 1b       	sub	r27, r27
     a24:	fd 01       	movw	r30, r26
     a26:	0d c0       	rjmp	.+26     	; 0xa42 <__udivmodsi4_ep>

00000a28 <__udivmodsi4_loop>:
     a28:	aa 1f       	adc	r26, r26
     a2a:	bb 1f       	adc	r27, r27
     a2c:	ee 1f       	adc	r30, r30
     a2e:	ff 1f       	adc	r31, r31
     a30:	a2 17       	cp	r26, r18
     a32:	b3 07       	cpc	r27, r19
     a34:	e4 07       	cpc	r30, r20
     a36:	f5 07       	cpc	r31, r21
     a38:	20 f0       	brcs	.+8      	; 0xa42 <__udivmodsi4_ep>
     a3a:	a2 1b       	sub	r26, r18
     a3c:	b3 0b       	sbc	r27, r19
     a3e:	e4 0b       	sbc	r30, r20
     a40:	f5 0b       	sbc	r31, r21

00000a42 <__udivmodsi4_ep>:
     a42:	66 1f       	adc	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	88 1f       	adc	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	1a 94       	dec	r1
     a4c:	69 f7       	brne	.-38     	; 0xa28 <__udivmodsi4_loop>
     a4e:	60 95       	com	r22
     a50:	70 95       	com	r23
     a52:	80 95       	com	r24
     a54:	90 95       	com	r25
     a56:	9b 01       	movw	r18, r22
     a58:	ac 01       	movw	r20, r24
     a5a:	bd 01       	movw	r22, r26
     a5c:	cf 01       	movw	r24, r30
     a5e:	08 95       	ret

00000a60 <printf>:
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
     a68:	ae 01       	movw	r20, r28
     a6a:	4b 5f       	subi	r20, 0xFB	; 251
     a6c:	5f 4f       	sbci	r21, 0xFF	; 255
     a6e:	fa 01       	movw	r30, r20
     a70:	61 91       	ld	r22, Z+
     a72:	71 91       	ld	r23, Z+
     a74:	af 01       	movw	r20, r30
     a76:	80 91 22 41 	lds	r24, 0x4122	; 0x804122 <__iob+0x2>
     a7a:	90 91 23 41 	lds	r25, 0x4123	; 0x804123 <__iob+0x3>
     a7e:	0e 94 74 05 	call	0xae8	; 0xae8 <vfprintf>
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <puts>:
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	e0 91 22 41 	lds	r30, 0x4122	; 0x804122 <__iob+0x2>
     a94:	f0 91 23 41 	lds	r31, 0x4123	; 0x804123 <__iob+0x3>
     a98:	23 81       	ldd	r18, Z+3	; 0x03
     a9a:	21 ff       	sbrs	r18, 1
     a9c:	1b c0       	rjmp	.+54     	; 0xad4 <puts+0x4c>
     a9e:	8c 01       	movw	r16, r24
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
     aa2:	c0 e0       	ldi	r28, 0x00	; 0
     aa4:	f8 01       	movw	r30, r16
     aa6:	81 91       	ld	r24, Z+
     aa8:	8f 01       	movw	r16, r30
     aaa:	60 91 22 41 	lds	r22, 0x4122	; 0x804122 <__iob+0x2>
     aae:	70 91 23 41 	lds	r23, 0x4123	; 0x804123 <__iob+0x3>
     ab2:	db 01       	movw	r26, r22
     ab4:	18 96       	adiw	r26, 0x08	; 8
     ab6:	ed 91       	ld	r30, X+
     ab8:	fc 91       	ld	r31, X
     aba:	19 97       	sbiw	r26, 0x09	; 9
     abc:	88 23       	and	r24, r24
     abe:	31 f0       	breq	.+12     	; 0xacc <puts+0x44>
     ac0:	09 95       	icall
     ac2:	89 2b       	or	r24, r25
     ac4:	79 f3       	breq	.-34     	; 0xaa4 <puts+0x1c>
     ac6:	df ef       	ldi	r29, 0xFF	; 255
     ac8:	cf ef       	ldi	r28, 0xFF	; 255
     aca:	ec cf       	rjmp	.-40     	; 0xaa4 <puts+0x1c>
     acc:	8a e0       	ldi	r24, 0x0A	; 10
     ace:	09 95       	icall
     ad0:	89 2b       	or	r24, r25
     ad2:	19 f0       	breq	.+6      	; 0xada <puts+0x52>
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	02 c0       	rjmp	.+4      	; 0xade <puts+0x56>
     ada:	8d 2f       	mov	r24, r29
     adc:	9c 2f       	mov	r25, r28
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	08 95       	ret

00000ae8 <vfprintf>:
     ae8:	2f 92       	push	r2
     aea:	3f 92       	push	r3
     aec:	4f 92       	push	r4
     aee:	5f 92       	push	r5
     af0:	6f 92       	push	r6
     af2:	7f 92       	push	r7
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	cf 92       	push	r12
     afe:	df 92       	push	r13
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	2b 97       	sbiw	r28, 0x0b	; 11
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	6c 01       	movw	r12, r24
     b18:	7b 01       	movw	r14, r22
     b1a:	8a 01       	movw	r16, r20
     b1c:	fc 01       	movw	r30, r24
     b1e:	16 82       	std	Z+6, r1	; 0x06
     b20:	17 82       	std	Z+7, r1	; 0x07
     b22:	83 81       	ldd	r24, Z+3	; 0x03
     b24:	81 ff       	sbrs	r24, 1
     b26:	cc c1       	rjmp	.+920    	; 0xec0 <vfprintf+0x3d8>
     b28:	ce 01       	movw	r24, r28
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	3c 01       	movw	r6, r24
     b2e:	f6 01       	movw	r30, r12
     b30:	93 81       	ldd	r25, Z+3	; 0x03
     b32:	f7 01       	movw	r30, r14
     b34:	93 fd       	sbrc	r25, 3
     b36:	85 91       	lpm	r24, Z+
     b38:	93 ff       	sbrs	r25, 3
     b3a:	81 91       	ld	r24, Z+
     b3c:	7f 01       	movw	r14, r30
     b3e:	88 23       	and	r24, r24
     b40:	09 f4       	brne	.+2      	; 0xb44 <vfprintf+0x5c>
     b42:	ba c1       	rjmp	.+884    	; 0xeb8 <vfprintf+0x3d0>
     b44:	85 32       	cpi	r24, 0x25	; 37
     b46:	39 f4       	brne	.+14     	; 0xb56 <vfprintf+0x6e>
     b48:	93 fd       	sbrc	r25, 3
     b4a:	85 91       	lpm	r24, Z+
     b4c:	93 ff       	sbrs	r25, 3
     b4e:	81 91       	ld	r24, Z+
     b50:	7f 01       	movw	r14, r30
     b52:	85 32       	cpi	r24, 0x25	; 37
     b54:	29 f4       	brne	.+10     	; 0xb60 <vfprintf+0x78>
     b56:	b6 01       	movw	r22, r12
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     b5e:	e7 cf       	rjmp	.-50     	; 0xb2e <vfprintf+0x46>
     b60:	91 2c       	mov	r9, r1
     b62:	21 2c       	mov	r2, r1
     b64:	31 2c       	mov	r3, r1
     b66:	ff e1       	ldi	r31, 0x1F	; 31
     b68:	f3 15       	cp	r31, r3
     b6a:	d8 f0       	brcs	.+54     	; 0xba2 <vfprintf+0xba>
     b6c:	8b 32       	cpi	r24, 0x2B	; 43
     b6e:	79 f0       	breq	.+30     	; 0xb8e <vfprintf+0xa6>
     b70:	38 f4       	brcc	.+14     	; 0xb80 <vfprintf+0x98>
     b72:	80 32       	cpi	r24, 0x20	; 32
     b74:	79 f0       	breq	.+30     	; 0xb94 <vfprintf+0xac>
     b76:	83 32       	cpi	r24, 0x23	; 35
     b78:	a1 f4       	brne	.+40     	; 0xba2 <vfprintf+0xba>
     b7a:	23 2d       	mov	r18, r3
     b7c:	20 61       	ori	r18, 0x10	; 16
     b7e:	1d c0       	rjmp	.+58     	; 0xbba <vfprintf+0xd2>
     b80:	8d 32       	cpi	r24, 0x2D	; 45
     b82:	61 f0       	breq	.+24     	; 0xb9c <vfprintf+0xb4>
     b84:	80 33       	cpi	r24, 0x30	; 48
     b86:	69 f4       	brne	.+26     	; 0xba2 <vfprintf+0xba>
     b88:	23 2d       	mov	r18, r3
     b8a:	21 60       	ori	r18, 0x01	; 1
     b8c:	16 c0       	rjmp	.+44     	; 0xbba <vfprintf+0xd2>
     b8e:	83 2d       	mov	r24, r3
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	38 2e       	mov	r3, r24
     b94:	e3 2d       	mov	r30, r3
     b96:	e4 60       	ori	r30, 0x04	; 4
     b98:	3e 2e       	mov	r3, r30
     b9a:	2a c0       	rjmp	.+84     	; 0xbf0 <vfprintf+0x108>
     b9c:	f3 2d       	mov	r31, r3
     b9e:	f8 60       	ori	r31, 0x08	; 8
     ba0:	1d c0       	rjmp	.+58     	; 0xbdc <vfprintf+0xf4>
     ba2:	37 fc       	sbrc	r3, 7
     ba4:	2d c0       	rjmp	.+90     	; 0xc00 <vfprintf+0x118>
     ba6:	20 ed       	ldi	r18, 0xD0	; 208
     ba8:	28 0f       	add	r18, r24
     baa:	2a 30       	cpi	r18, 0x0A	; 10
     bac:	40 f0       	brcs	.+16     	; 0xbbe <vfprintf+0xd6>
     bae:	8e 32       	cpi	r24, 0x2E	; 46
     bb0:	b9 f4       	brne	.+46     	; 0xbe0 <vfprintf+0xf8>
     bb2:	36 fc       	sbrc	r3, 6
     bb4:	81 c1       	rjmp	.+770    	; 0xeb8 <vfprintf+0x3d0>
     bb6:	23 2d       	mov	r18, r3
     bb8:	20 64       	ori	r18, 0x40	; 64
     bba:	32 2e       	mov	r3, r18
     bbc:	19 c0       	rjmp	.+50     	; 0xbf0 <vfprintf+0x108>
     bbe:	36 fe       	sbrs	r3, 6
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <vfprintf+0xe6>
     bc2:	8a e0       	ldi	r24, 0x0A	; 10
     bc4:	98 9e       	mul	r9, r24
     bc6:	20 0d       	add	r18, r0
     bc8:	11 24       	eor	r1, r1
     bca:	92 2e       	mov	r9, r18
     bcc:	11 c0       	rjmp	.+34     	; 0xbf0 <vfprintf+0x108>
     bce:	ea e0       	ldi	r30, 0x0A	; 10
     bd0:	2e 9e       	mul	r2, r30
     bd2:	20 0d       	add	r18, r0
     bd4:	11 24       	eor	r1, r1
     bd6:	22 2e       	mov	r2, r18
     bd8:	f3 2d       	mov	r31, r3
     bda:	f0 62       	ori	r31, 0x20	; 32
     bdc:	3f 2e       	mov	r3, r31
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <vfprintf+0x108>
     be0:	8c 36       	cpi	r24, 0x6C	; 108
     be2:	21 f4       	brne	.+8      	; 0xbec <vfprintf+0x104>
     be4:	83 2d       	mov	r24, r3
     be6:	80 68       	ori	r24, 0x80	; 128
     be8:	38 2e       	mov	r3, r24
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <vfprintf+0x108>
     bec:	88 36       	cpi	r24, 0x68	; 104
     bee:	41 f4       	brne	.+16     	; 0xc00 <vfprintf+0x118>
     bf0:	f7 01       	movw	r30, r14
     bf2:	93 fd       	sbrc	r25, 3
     bf4:	85 91       	lpm	r24, Z+
     bf6:	93 ff       	sbrs	r25, 3
     bf8:	81 91       	ld	r24, Z+
     bfa:	7f 01       	movw	r14, r30
     bfc:	81 11       	cpse	r24, r1
     bfe:	b3 cf       	rjmp	.-154    	; 0xb66 <vfprintf+0x7e>
     c00:	98 2f       	mov	r25, r24
     c02:	9f 7d       	andi	r25, 0xDF	; 223
     c04:	95 54       	subi	r25, 0x45	; 69
     c06:	93 30       	cpi	r25, 0x03	; 3
     c08:	28 f4       	brcc	.+10     	; 0xc14 <vfprintf+0x12c>
     c0a:	0c 5f       	subi	r16, 0xFC	; 252
     c0c:	1f 4f       	sbci	r17, 0xFF	; 255
     c0e:	9f e3       	ldi	r25, 0x3F	; 63
     c10:	99 83       	std	Y+1, r25	; 0x01
     c12:	0d c0       	rjmp	.+26     	; 0xc2e <vfprintf+0x146>
     c14:	83 36       	cpi	r24, 0x63	; 99
     c16:	31 f0       	breq	.+12     	; 0xc24 <vfprintf+0x13c>
     c18:	83 37       	cpi	r24, 0x73	; 115
     c1a:	71 f0       	breq	.+28     	; 0xc38 <vfprintf+0x150>
     c1c:	83 35       	cpi	r24, 0x53	; 83
     c1e:	09 f0       	breq	.+2      	; 0xc22 <vfprintf+0x13a>
     c20:	59 c0       	rjmp	.+178    	; 0xcd4 <vfprintf+0x1ec>
     c22:	21 c0       	rjmp	.+66     	; 0xc66 <vfprintf+0x17e>
     c24:	f8 01       	movw	r30, r16
     c26:	80 81       	ld	r24, Z
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	0e 5f       	subi	r16, 0xFE	; 254
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	88 24       	eor	r8, r8
     c30:	83 94       	inc	r8
     c32:	91 2c       	mov	r9, r1
     c34:	53 01       	movw	r10, r6
     c36:	13 c0       	rjmp	.+38     	; 0xc5e <vfprintf+0x176>
     c38:	28 01       	movw	r4, r16
     c3a:	f2 e0       	ldi	r31, 0x02	; 2
     c3c:	4f 0e       	add	r4, r31
     c3e:	51 1c       	adc	r5, r1
     c40:	f8 01       	movw	r30, r16
     c42:	a0 80       	ld	r10, Z
     c44:	b1 80       	ldd	r11, Z+1	; 0x01
     c46:	36 fe       	sbrs	r3, 6
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x168>
     c4a:	69 2d       	mov	r22, r9
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <vfprintf+0x16c>
     c50:	6f ef       	ldi	r22, 0xFF	; 255
     c52:	7f ef       	ldi	r23, 0xFF	; 255
     c54:	c5 01       	movw	r24, r10
     c56:	0e 94 83 07 	call	0xf06	; 0xf06 <strnlen>
     c5a:	4c 01       	movw	r8, r24
     c5c:	82 01       	movw	r16, r4
     c5e:	f3 2d       	mov	r31, r3
     c60:	ff 77       	andi	r31, 0x7F	; 127
     c62:	3f 2e       	mov	r3, r31
     c64:	16 c0       	rjmp	.+44     	; 0xc92 <vfprintf+0x1aa>
     c66:	28 01       	movw	r4, r16
     c68:	22 e0       	ldi	r18, 0x02	; 2
     c6a:	42 0e       	add	r4, r18
     c6c:	51 1c       	adc	r5, r1
     c6e:	f8 01       	movw	r30, r16
     c70:	a0 80       	ld	r10, Z
     c72:	b1 80       	ldd	r11, Z+1	; 0x01
     c74:	36 fe       	sbrs	r3, 6
     c76:	03 c0       	rjmp	.+6      	; 0xc7e <vfprintf+0x196>
     c78:	69 2d       	mov	r22, r9
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <vfprintf+0x19a>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	c5 01       	movw	r24, r10
     c84:	0e 94 78 07 	call	0xef0	; 0xef0 <strnlen_P>
     c88:	4c 01       	movw	r8, r24
     c8a:	f3 2d       	mov	r31, r3
     c8c:	f0 68       	ori	r31, 0x80	; 128
     c8e:	3f 2e       	mov	r3, r31
     c90:	82 01       	movw	r16, r4
     c92:	33 fc       	sbrc	r3, 3
     c94:	1b c0       	rjmp	.+54     	; 0xccc <vfprintf+0x1e4>
     c96:	82 2d       	mov	r24, r2
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	88 16       	cp	r8, r24
     c9c:	99 06       	cpc	r9, r25
     c9e:	b0 f4       	brcc	.+44     	; 0xccc <vfprintf+0x1e4>
     ca0:	b6 01       	movw	r22, r12
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     caa:	2a 94       	dec	r2
     cac:	f4 cf       	rjmp	.-24     	; 0xc96 <vfprintf+0x1ae>
     cae:	f5 01       	movw	r30, r10
     cb0:	37 fc       	sbrc	r3, 7
     cb2:	85 91       	lpm	r24, Z+
     cb4:	37 fe       	sbrs	r3, 7
     cb6:	81 91       	ld	r24, Z+
     cb8:	5f 01       	movw	r10, r30
     cba:	b6 01       	movw	r22, r12
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     cc2:	21 10       	cpse	r2, r1
     cc4:	2a 94       	dec	r2
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	82 1a       	sub	r8, r18
     cca:	91 08       	sbc	r9, r1
     ccc:	81 14       	cp	r8, r1
     cce:	91 04       	cpc	r9, r1
     cd0:	71 f7       	brne	.-36     	; 0xcae <vfprintf+0x1c6>
     cd2:	e8 c0       	rjmp	.+464    	; 0xea4 <vfprintf+0x3bc>
     cd4:	84 36       	cpi	r24, 0x64	; 100
     cd6:	11 f0       	breq	.+4      	; 0xcdc <vfprintf+0x1f4>
     cd8:	89 36       	cpi	r24, 0x69	; 105
     cda:	41 f5       	brne	.+80     	; 0xd2c <vfprintf+0x244>
     cdc:	f8 01       	movw	r30, r16
     cde:	37 fe       	sbrs	r3, 7
     ce0:	07 c0       	rjmp	.+14     	; 0xcf0 <vfprintf+0x208>
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	0c 5f       	subi	r16, 0xFC	; 252
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	08 c0       	rjmp	.+16     	; 0xd00 <vfprintf+0x218>
     cf0:	60 81       	ld	r22, Z
     cf2:	71 81       	ldd	r23, Z+1	; 0x01
     cf4:	07 2e       	mov	r0, r23
     cf6:	00 0c       	add	r0, r0
     cf8:	88 0b       	sbc	r24, r24
     cfa:	99 0b       	sbc	r25, r25
     cfc:	0e 5f       	subi	r16, 0xFE	; 254
     cfe:	1f 4f       	sbci	r17, 0xFF	; 255
     d00:	f3 2d       	mov	r31, r3
     d02:	ff 76       	andi	r31, 0x6F	; 111
     d04:	3f 2e       	mov	r3, r31
     d06:	97 ff       	sbrs	r25, 7
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x234>
     d0a:	90 95       	com	r25
     d0c:	80 95       	com	r24
     d0e:	70 95       	com	r23
     d10:	61 95       	neg	r22
     d12:	7f 4f       	sbci	r23, 0xFF	; 255
     d14:	8f 4f       	sbci	r24, 0xFF	; 255
     d16:	9f 4f       	sbci	r25, 0xFF	; 255
     d18:	f0 68       	ori	r31, 0x80	; 128
     d1a:	3f 2e       	mov	r3, r31
     d1c:	2a e0       	ldi	r18, 0x0A	; 10
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	a3 01       	movw	r20, r6
     d22:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     d26:	88 2e       	mov	r8, r24
     d28:	86 18       	sub	r8, r6
     d2a:	45 c0       	rjmp	.+138    	; 0xdb6 <vfprintf+0x2ce>
     d2c:	85 37       	cpi	r24, 0x75	; 117
     d2e:	31 f4       	brne	.+12     	; 0xd3c <vfprintf+0x254>
     d30:	23 2d       	mov	r18, r3
     d32:	2f 7e       	andi	r18, 0xEF	; 239
     d34:	b2 2e       	mov	r11, r18
     d36:	2a e0       	ldi	r18, 0x0A	; 10
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	25 c0       	rjmp	.+74     	; 0xd86 <vfprintf+0x29e>
     d3c:	93 2d       	mov	r25, r3
     d3e:	99 7f       	andi	r25, 0xF9	; 249
     d40:	b9 2e       	mov	r11, r25
     d42:	8f 36       	cpi	r24, 0x6F	; 111
     d44:	c1 f0       	breq	.+48     	; 0xd76 <vfprintf+0x28e>
     d46:	18 f4       	brcc	.+6      	; 0xd4e <vfprintf+0x266>
     d48:	88 35       	cpi	r24, 0x58	; 88
     d4a:	79 f0       	breq	.+30     	; 0xd6a <vfprintf+0x282>
     d4c:	b5 c0       	rjmp	.+362    	; 0xeb8 <vfprintf+0x3d0>
     d4e:	80 37       	cpi	r24, 0x70	; 112
     d50:	19 f0       	breq	.+6      	; 0xd58 <vfprintf+0x270>
     d52:	88 37       	cpi	r24, 0x78	; 120
     d54:	21 f0       	breq	.+8      	; 0xd5e <vfprintf+0x276>
     d56:	b0 c0       	rjmp	.+352    	; 0xeb8 <vfprintf+0x3d0>
     d58:	e9 2f       	mov	r30, r25
     d5a:	e0 61       	ori	r30, 0x10	; 16
     d5c:	be 2e       	mov	r11, r30
     d5e:	b4 fe       	sbrs	r11, 4
     d60:	0d c0       	rjmp	.+26     	; 0xd7c <vfprintf+0x294>
     d62:	fb 2d       	mov	r31, r11
     d64:	f4 60       	ori	r31, 0x04	; 4
     d66:	bf 2e       	mov	r11, r31
     d68:	09 c0       	rjmp	.+18     	; 0xd7c <vfprintf+0x294>
     d6a:	34 fe       	sbrs	r3, 4
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <vfprintf+0x29a>
     d6e:	29 2f       	mov	r18, r25
     d70:	26 60       	ori	r18, 0x06	; 6
     d72:	b2 2e       	mov	r11, r18
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <vfprintf+0x29a>
     d76:	28 e0       	ldi	r18, 0x08	; 8
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <vfprintf+0x29e>
     d7c:	20 e1       	ldi	r18, 0x10	; 16
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	02 c0       	rjmp	.+4      	; 0xd86 <vfprintf+0x29e>
     d82:	20 e1       	ldi	r18, 0x10	; 16
     d84:	32 e0       	ldi	r19, 0x02	; 2
     d86:	f8 01       	movw	r30, r16
     d88:	b7 fe       	sbrs	r11, 7
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <vfprintf+0x2b2>
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	0c 5f       	subi	r16, 0xFC	; 252
     d96:	1f 4f       	sbci	r17, 0xFF	; 255
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <vfprintf+0x2be>
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	0e 5f       	subi	r16, 0xFE	; 254
     da4:	1f 4f       	sbci	r17, 0xFF	; 255
     da6:	a3 01       	movw	r20, r6
     da8:	0e 94 ca 07 	call	0xf94	; 0xf94 <__ultoa_invert>
     dac:	88 2e       	mov	r8, r24
     dae:	86 18       	sub	r8, r6
     db0:	fb 2d       	mov	r31, r11
     db2:	ff 77       	andi	r31, 0x7F	; 127
     db4:	3f 2e       	mov	r3, r31
     db6:	36 fe       	sbrs	r3, 6
     db8:	0d c0       	rjmp	.+26     	; 0xdd4 <vfprintf+0x2ec>
     dba:	23 2d       	mov	r18, r3
     dbc:	2e 7f       	andi	r18, 0xFE	; 254
     dbe:	a2 2e       	mov	r10, r18
     dc0:	89 14       	cp	r8, r9
     dc2:	58 f4       	brcc	.+22     	; 0xdda <vfprintf+0x2f2>
     dc4:	34 fe       	sbrs	r3, 4
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <vfprintf+0x2f6>
     dc8:	32 fc       	sbrc	r3, 2
     dca:	09 c0       	rjmp	.+18     	; 0xdde <vfprintf+0x2f6>
     dcc:	83 2d       	mov	r24, r3
     dce:	8e 7e       	andi	r24, 0xEE	; 238
     dd0:	a8 2e       	mov	r10, r24
     dd2:	05 c0       	rjmp	.+10     	; 0xdde <vfprintf+0x2f6>
     dd4:	b8 2c       	mov	r11, r8
     dd6:	a3 2c       	mov	r10, r3
     dd8:	03 c0       	rjmp	.+6      	; 0xde0 <vfprintf+0x2f8>
     dda:	b8 2c       	mov	r11, r8
     ddc:	01 c0       	rjmp	.+2      	; 0xde0 <vfprintf+0x2f8>
     dde:	b9 2c       	mov	r11, r9
     de0:	a4 fe       	sbrs	r10, 4
     de2:	0f c0       	rjmp	.+30     	; 0xe02 <vfprintf+0x31a>
     de4:	fe 01       	movw	r30, r28
     de6:	e8 0d       	add	r30, r8
     de8:	f1 1d       	adc	r31, r1
     dea:	80 81       	ld	r24, Z
     dec:	80 33       	cpi	r24, 0x30	; 48
     dee:	21 f4       	brne	.+8      	; 0xdf8 <vfprintf+0x310>
     df0:	9a 2d       	mov	r25, r10
     df2:	99 7e       	andi	r25, 0xE9	; 233
     df4:	a9 2e       	mov	r10, r25
     df6:	09 c0       	rjmp	.+18     	; 0xe0a <vfprintf+0x322>
     df8:	a2 fe       	sbrs	r10, 2
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <vfprintf+0x320>
     dfc:	b3 94       	inc	r11
     dfe:	b3 94       	inc	r11
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <vfprintf+0x322>
     e02:	8a 2d       	mov	r24, r10
     e04:	86 78       	andi	r24, 0x86	; 134
     e06:	09 f0       	breq	.+2      	; 0xe0a <vfprintf+0x322>
     e08:	b3 94       	inc	r11
     e0a:	a3 fc       	sbrc	r10, 3
     e0c:	11 c0       	rjmp	.+34     	; 0xe30 <vfprintf+0x348>
     e0e:	a0 fe       	sbrs	r10, 0
     e10:	06 c0       	rjmp	.+12     	; 0xe1e <vfprintf+0x336>
     e12:	b2 14       	cp	r11, r2
     e14:	88 f4       	brcc	.+34     	; 0xe38 <vfprintf+0x350>
     e16:	28 0c       	add	r2, r8
     e18:	92 2c       	mov	r9, r2
     e1a:	9b 18       	sub	r9, r11
     e1c:	0e c0       	rjmp	.+28     	; 0xe3a <vfprintf+0x352>
     e1e:	b2 14       	cp	r11, r2
     e20:	60 f4       	brcc	.+24     	; 0xe3a <vfprintf+0x352>
     e22:	b6 01       	movw	r22, r12
     e24:	80 e2       	ldi	r24, 0x20	; 32
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e2c:	b3 94       	inc	r11
     e2e:	f7 cf       	rjmp	.-18     	; 0xe1e <vfprintf+0x336>
     e30:	b2 14       	cp	r11, r2
     e32:	18 f4       	brcc	.+6      	; 0xe3a <vfprintf+0x352>
     e34:	2b 18       	sub	r2, r11
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <vfprintf+0x354>
     e38:	98 2c       	mov	r9, r8
     e3a:	21 2c       	mov	r2, r1
     e3c:	a4 fe       	sbrs	r10, 4
     e3e:	10 c0       	rjmp	.+32     	; 0xe60 <vfprintf+0x378>
     e40:	b6 01       	movw	r22, r12
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e4a:	a2 fe       	sbrs	r10, 2
     e4c:	17 c0       	rjmp	.+46     	; 0xe7c <vfprintf+0x394>
     e4e:	a1 fc       	sbrc	r10, 1
     e50:	03 c0       	rjmp	.+6      	; 0xe58 <vfprintf+0x370>
     e52:	88 e7       	ldi	r24, 0x78	; 120
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <vfprintf+0x374>
     e58:	88 e5       	ldi	r24, 0x58	; 88
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	b6 01       	movw	r22, r12
     e5e:	0c c0       	rjmp	.+24     	; 0xe78 <vfprintf+0x390>
     e60:	8a 2d       	mov	r24, r10
     e62:	86 78       	andi	r24, 0x86	; 134
     e64:	59 f0       	breq	.+22     	; 0xe7c <vfprintf+0x394>
     e66:	a1 fe       	sbrs	r10, 1
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0x386>
     e6a:	8b e2       	ldi	r24, 0x2B	; 43
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <vfprintf+0x388>
     e6e:	80 e2       	ldi	r24, 0x20	; 32
     e70:	a7 fc       	sbrc	r10, 7
     e72:	8d e2       	ldi	r24, 0x2D	; 45
     e74:	b6 01       	movw	r22, r12
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e7c:	89 14       	cp	r8, r9
     e7e:	38 f4       	brcc	.+14     	; 0xe8e <vfprintf+0x3a6>
     e80:	b6 01       	movw	r22, r12
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     e8a:	9a 94       	dec	r9
     e8c:	f7 cf       	rjmp	.-18     	; 0xe7c <vfprintf+0x394>
     e8e:	8a 94       	dec	r8
     e90:	f3 01       	movw	r30, r6
     e92:	e8 0d       	add	r30, r8
     e94:	f1 1d       	adc	r31, r1
     e96:	80 81       	ld	r24, Z
     e98:	b6 01       	movw	r22, r12
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     ea0:	81 10       	cpse	r8, r1
     ea2:	f5 cf       	rjmp	.-22     	; 0xe8e <vfprintf+0x3a6>
     ea4:	22 20       	and	r2, r2
     ea6:	09 f4       	brne	.+2      	; 0xeaa <vfprintf+0x3c2>
     ea8:	42 ce       	rjmp	.-892    	; 0xb2e <vfprintf+0x46>
     eaa:	b6 01       	movw	r22, r12
     eac:	80 e2       	ldi	r24, 0x20	; 32
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	0e 94 8e 07 	call	0xf1c	; 0xf1c <fputc>
     eb4:	2a 94       	dec	r2
     eb6:	f6 cf       	rjmp	.-20     	; 0xea4 <vfprintf+0x3bc>
     eb8:	f6 01       	movw	r30, r12
     eba:	86 81       	ldd	r24, Z+6	; 0x06
     ebc:	97 81       	ldd	r25, Z+7	; 0x07
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <vfprintf+0x3dc>
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	9f ef       	ldi	r25, 0xFF	; 255
     ec4:	2b 96       	adiw	r28, 0x0b	; 11
     ec6:	cd bf       	out	0x3d, r28	; 61
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	df 91       	pop	r29
     ecc:	cf 91       	pop	r28
     ece:	1f 91       	pop	r17
     ed0:	0f 91       	pop	r16
     ed2:	ff 90       	pop	r15
     ed4:	ef 90       	pop	r14
     ed6:	df 90       	pop	r13
     ed8:	cf 90       	pop	r12
     eda:	bf 90       	pop	r11
     edc:	af 90       	pop	r10
     ede:	9f 90       	pop	r9
     ee0:	8f 90       	pop	r8
     ee2:	7f 90       	pop	r7
     ee4:	6f 90       	pop	r6
     ee6:	5f 90       	pop	r5
     ee8:	4f 90       	pop	r4
     eea:	3f 90       	pop	r3
     eec:	2f 90       	pop	r2
     eee:	08 95       	ret

00000ef0 <strnlen_P>:
     ef0:	fc 01       	movw	r30, r24
     ef2:	05 90       	lpm	r0, Z+
     ef4:	61 50       	subi	r22, 0x01	; 1
     ef6:	70 40       	sbci	r23, 0x00	; 0
     ef8:	01 10       	cpse	r0, r1
     efa:	d8 f7       	brcc	.-10     	; 0xef2 <strnlen_P+0x2>
     efc:	80 95       	com	r24
     efe:	90 95       	com	r25
     f00:	8e 0f       	add	r24, r30
     f02:	9f 1f       	adc	r25, r31
     f04:	08 95       	ret

00000f06 <strnlen>:
     f06:	fc 01       	movw	r30, r24
     f08:	61 50       	subi	r22, 0x01	; 1
     f0a:	70 40       	sbci	r23, 0x00	; 0
     f0c:	01 90       	ld	r0, Z+
     f0e:	01 10       	cpse	r0, r1
     f10:	d8 f7       	brcc	.-10     	; 0xf08 <strnlen+0x2>
     f12:	80 95       	com	r24
     f14:	90 95       	com	r25
     f16:	8e 0f       	add	r24, r30
     f18:	9f 1f       	adc	r25, r31
     f1a:	08 95       	ret

00000f1c <fputc>:
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	fb 01       	movw	r30, r22
     f26:	23 81       	ldd	r18, Z+3	; 0x03
     f28:	21 fd       	sbrc	r18, 1
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <fputc+0x16>
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f ef       	ldi	r25, 0xFF	; 255
     f30:	2c c0       	rjmp	.+88     	; 0xf8a <fputc+0x6e>
     f32:	22 ff       	sbrs	r18, 2
     f34:	16 c0       	rjmp	.+44     	; 0xf62 <fputc+0x46>
     f36:	46 81       	ldd	r20, Z+6	; 0x06
     f38:	57 81       	ldd	r21, Z+7	; 0x07
     f3a:	24 81       	ldd	r18, Z+4	; 0x04
     f3c:	35 81       	ldd	r19, Z+5	; 0x05
     f3e:	42 17       	cp	r20, r18
     f40:	53 07       	cpc	r21, r19
     f42:	44 f4       	brge	.+16     	; 0xf54 <fputc+0x38>
     f44:	a0 81       	ld	r26, Z
     f46:	b1 81       	ldd	r27, Z+1	; 0x01
     f48:	9d 01       	movw	r18, r26
     f4a:	2f 5f       	subi	r18, 0xFF	; 255
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	20 83       	st	Z, r18
     f50:	31 83       	std	Z+1, r19	; 0x01
     f52:	8c 93       	st	X, r24
     f54:	26 81       	ldd	r18, Z+6	; 0x06
     f56:	37 81       	ldd	r19, Z+7	; 0x07
     f58:	2f 5f       	subi	r18, 0xFF	; 255
     f5a:	3f 4f       	sbci	r19, 0xFF	; 255
     f5c:	26 83       	std	Z+6, r18	; 0x06
     f5e:	37 83       	std	Z+7, r19	; 0x07
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <fputc+0x6e>
     f62:	8b 01       	movw	r16, r22
     f64:	ec 01       	movw	r28, r24
     f66:	fb 01       	movw	r30, r22
     f68:	00 84       	ldd	r0, Z+8	; 0x08
     f6a:	f1 85       	ldd	r31, Z+9	; 0x09
     f6c:	e0 2d       	mov	r30, r0
     f6e:	09 95       	icall
     f70:	89 2b       	or	r24, r25
     f72:	e1 f6       	brne	.-72     	; 0xf2c <fputc+0x10>
     f74:	d8 01       	movw	r26, r16
     f76:	16 96       	adiw	r26, 0x06	; 6
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	17 97       	sbiw	r26, 0x07	; 7
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	16 96       	adiw	r26, 0x06	; 6
     f82:	8d 93       	st	X+, r24
     f84:	9c 93       	st	X, r25
     f86:	17 97       	sbiw	r26, 0x07	; 7
     f88:	ce 01       	movw	r24, r28
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	1f 91       	pop	r17
     f90:	0f 91       	pop	r16
     f92:	08 95       	ret

00000f94 <__ultoa_invert>:
     f94:	fa 01       	movw	r30, r20
     f96:	aa 27       	eor	r26, r26
     f98:	28 30       	cpi	r18, 0x08	; 8
     f9a:	51 f1       	breq	.+84     	; 0xff0 <__ultoa_invert+0x5c>
     f9c:	20 31       	cpi	r18, 0x10	; 16
     f9e:	81 f1       	breq	.+96     	; 0x1000 <__ultoa_invert+0x6c>
     fa0:	e8 94       	clt
     fa2:	6f 93       	push	r22
     fa4:	6e 7f       	andi	r22, 0xFE	; 254
     fa6:	6e 5f       	subi	r22, 0xFE	; 254
     fa8:	7f 4f       	sbci	r23, 0xFF	; 255
     faa:	8f 4f       	sbci	r24, 0xFF	; 255
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	af 4f       	sbci	r26, 0xFF	; 255
     fb0:	b1 e0       	ldi	r27, 0x01	; 1
     fb2:	3e d0       	rcall	.+124    	; 0x1030 <__ultoa_invert+0x9c>
     fb4:	b4 e0       	ldi	r27, 0x04	; 4
     fb6:	3c d0       	rcall	.+120    	; 0x1030 <__ultoa_invert+0x9c>
     fb8:	67 0f       	add	r22, r23
     fba:	78 1f       	adc	r23, r24
     fbc:	89 1f       	adc	r24, r25
     fbe:	9a 1f       	adc	r25, r26
     fc0:	a1 1d       	adc	r26, r1
     fc2:	68 0f       	add	r22, r24
     fc4:	79 1f       	adc	r23, r25
     fc6:	8a 1f       	adc	r24, r26
     fc8:	91 1d       	adc	r25, r1
     fca:	a1 1d       	adc	r26, r1
     fcc:	6a 0f       	add	r22, r26
     fce:	71 1d       	adc	r23, r1
     fd0:	81 1d       	adc	r24, r1
     fd2:	91 1d       	adc	r25, r1
     fd4:	a1 1d       	adc	r26, r1
     fd6:	20 d0       	rcall	.+64     	; 0x1018 <__ultoa_invert+0x84>
     fd8:	09 f4       	brne	.+2      	; 0xfdc <__ultoa_invert+0x48>
     fda:	68 94       	set
     fdc:	3f 91       	pop	r19
     fde:	2a e0       	ldi	r18, 0x0A	; 10
     fe0:	26 9f       	mul	r18, r22
     fe2:	11 24       	eor	r1, r1
     fe4:	30 19       	sub	r19, r0
     fe6:	30 5d       	subi	r19, 0xD0	; 208
     fe8:	31 93       	st	Z+, r19
     fea:	de f6       	brtc	.-74     	; 0xfa2 <__ultoa_invert+0xe>
     fec:	cf 01       	movw	r24, r30
     fee:	08 95       	ret
     ff0:	46 2f       	mov	r20, r22
     ff2:	47 70       	andi	r20, 0x07	; 7
     ff4:	40 5d       	subi	r20, 0xD0	; 208
     ff6:	41 93       	st	Z+, r20
     ff8:	b3 e0       	ldi	r27, 0x03	; 3
     ffa:	0f d0       	rcall	.+30     	; 0x101a <__ultoa_invert+0x86>
     ffc:	c9 f7       	brne	.-14     	; 0xff0 <__ultoa_invert+0x5c>
     ffe:	f6 cf       	rjmp	.-20     	; 0xfec <__ultoa_invert+0x58>
    1000:	46 2f       	mov	r20, r22
    1002:	4f 70       	andi	r20, 0x0F	; 15
    1004:	40 5d       	subi	r20, 0xD0	; 208
    1006:	4a 33       	cpi	r20, 0x3A	; 58
    1008:	18 f0       	brcs	.+6      	; 0x1010 <__ultoa_invert+0x7c>
    100a:	49 5d       	subi	r20, 0xD9	; 217
    100c:	31 fd       	sbrc	r19, 1
    100e:	40 52       	subi	r20, 0x20	; 32
    1010:	41 93       	st	Z+, r20
    1012:	02 d0       	rcall	.+4      	; 0x1018 <__ultoa_invert+0x84>
    1014:	a9 f7       	brne	.-22     	; 0x1000 <__ultoa_invert+0x6c>
    1016:	ea cf       	rjmp	.-44     	; 0xfec <__ultoa_invert+0x58>
    1018:	b4 e0       	ldi	r27, 0x04	; 4
    101a:	a6 95       	lsr	r26
    101c:	97 95       	ror	r25
    101e:	87 95       	ror	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	ba 95       	dec	r27
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x86>
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	61 05       	cpc	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	08 95       	ret
    1030:	9b 01       	movw	r18, r22
    1032:	ac 01       	movw	r20, r24
    1034:	0a 2e       	mov	r0, r26
    1036:	06 94       	lsr	r0
    1038:	57 95       	ror	r21
    103a:	47 95       	ror	r20
    103c:	37 95       	ror	r19
    103e:	27 95       	ror	r18
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__ultoa_invert+0xa2>
    1044:	62 0f       	add	r22, r18
    1046:	73 1f       	adc	r23, r19
    1048:	84 1f       	adc	r24, r20
    104a:	95 1f       	adc	r25, r21
    104c:	a0 1d       	adc	r26, r0
    104e:	08 95       	ret

00001050 <_exit>:
    1050:	f8 94       	cli

00001052 <__stop_program>:
    1052:	ff cf       	rjmp	.-2      	; 0x1052 <__stop_program>
