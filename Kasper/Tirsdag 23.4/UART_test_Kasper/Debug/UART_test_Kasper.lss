
UART_test_Kasper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00804000  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080406a  0080406a  000003ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000036ea  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002fb2  00000000  00000000  00003b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000575  00000000  00000000  00006b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  000070c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018e4  00000000  00000000  00007178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000231  00000000  00000000  00008a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00008c8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e0 ef       	ldi	r30, 0xF0	; 240
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	aa 36       	cpi	r26, 0x6A	; 106
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	aa e6       	ldi	r26, 0x6A	; 106
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a0 37       	cpi	r26, 0x70	; 112
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <main>
 12e:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <USART3_sendChar>:



void USART3_sendChar(char c)	
{
	while (!(USART3.STATUS & USART_DREIF_bm))
 136:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 13a:	95 ff       	sbrs	r25, 5
 13c:	fc cf       	rjmp	.-8      	; 0x136 <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c;
 13e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 142:	08 95       	ret

00000144 <USART3_printChar>:
}

static int USART3_printChar(char c,  FILE *stream)
{
	USART3_sendChar(c);
 144:	0e 94 9b 00 	call	0x136	; 0x136 <USART3_sendChar>
	return 0;
}
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	08 95       	ret

0000014e <USART3_sendString>:




void USART3_sendString(char *str)
{
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 158:	c0 e0       	ldi	r28, 0x00	; 0
 15a:	d0 e0       	ldi	r29, 0x00	; 0
 15c:	07 c0       	rjmp	.+14     	; 0x16c <USART3_sendString+0x1e>
	{
		USART3_sendChar(str[i]);
 15e:	f8 01       	movw	r30, r16
 160:	ec 0f       	add	r30, r28
 162:	fd 1f       	adc	r31, r29
 164:	80 81       	ld	r24, Z
 166:	0e 94 9b 00 	call	0x136	; 0x136 <USART3_sendChar>



void USART3_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	f8 01       	movw	r30, r16
 16e:	01 90       	ld	r0, Z+
 170:	00 20       	and	r0, r0
 172:	e9 f7       	brne	.-6      	; 0x16e <USART3_sendString+0x20>
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	e0 1b       	sub	r30, r16
 178:	f1 0b       	sbc	r31, r17
 17a:	ce 17       	cp	r28, r30
 17c:	df 07       	cpc	r29, r31
 17e:	78 f3       	brcs	.-34     	; 0x15e <USART3_sendString+0x10>
	{
		USART3_sendChar(str[i]);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <USART3_readChar>:


char USART3_readChar(void)
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
 18a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 18e:	88 23       	and	r24, r24
 190:	e4 f7       	brge	.-8      	; 0x18a <USART3_readChar>
	{
		;
	}
	return USART3.RXDATAL;
 192:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
}
 196:	08 95       	ret

00000198 <USART3_init>:

void USART3_init(void)
{
	
	PORTB.DIRSET = PIN0_bm ; //TX -pin as output
 198:	e0 e2       	ldi	r30, 0x20	; 32
 19a:	f4 e0       	ldi	r31, 0x04	; 4
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	81 83       	std	Z+1, r24	; 0x01
	PORTB.DIRCLR = PIN1_bm ; //RX -pin as input
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	82 83       	std	Z+2, r24	; 0x02
	//PORTC.DIR &= ~PIN1_bm;
	//PORTC.DIR |= PIN0_bm;
	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600);
 1a4:	e0 e6       	ldi	r30, 0x60	; 96
 1a6:	f8 e0       	ldi	r31, 0x08	; 8
 1a8:	83 e8       	ldi	r24, 0x83	; 131
 1aa:	96 e0       	ldi	r25, 0x06	; 6
 1ac:	80 87       	std	Z+8, r24	; 0x08
 1ae:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLB |= USART_RXEN_bm | USART_TXEN_bm ; // Enable both TX and RX
 1b0:	86 81       	ldd	r24, Z+6	; 0x06
 1b2:	80 6c       	ori	r24, 0xC0	; 192
 1b4:	86 83       	std	Z+6, r24	; 0x06
 1b6:	08 95       	ret

000001b8 <executeCommand>:
	
}


void executeCommand(char *command)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	ec 01       	movw	r28, r24
	if(strcmp(command, "AUTO") == 0)
 1be:	6e e0       	ldi	r22, 0x0E	; 14
 1c0:	70 e4       	ldi	r23, 0x40	; 64
 1c2:	0e 94 3d 01 	call	0x27a	; 0x27a <strcmp>
 1c6:	89 2b       	or	r24, r25
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <executeCommand+0x1c>
	{
		//USART3_sendString("AUTOMATIC MODE ENABLED.\r\n");
		printf(("AUTOMATIC MODE ENABLED.\r\n"));
 1ca:	83 e1       	ldi	r24, 0x13	; 19
 1cc:	90 e4       	ldi	r25, 0x40	; 64
 1ce:	0e 94 46 01 	call	0x28c	; 0x28c <puts>
 1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <executeCommand+0x3c>

	}
	else if (strcmp(command, "MANUAL") == 0)
 1d4:	6c e2       	ldi	r22, 0x2C	; 44
 1d6:	70 e4       	ldi	r23, 0x40	; 64
 1d8:	ce 01       	movw	r24, r28
 1da:	0e 94 3d 01 	call	0x27a	; 0x27a <strcmp>
 1de:	89 2b       	or	r24, r25
 1e0:	29 f4       	brne	.+10     	; 0x1ec <executeCommand+0x34>
	{
		
		USART3_sendString("OK, LED OFF.\r\n");
 1e2:	83 e3       	ldi	r24, 0x33	; 51
 1e4:	90 e4       	ldi	r25, 0x40	; 64
 1e6:	0e 94 a7 00 	call	0x14e	; 0x14e <USART3_sendString>
 1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <executeCommand+0x3c>
	}
	else
	{
		USART3_sendString("Type AUTO/MANUAL to control the FANS.\r\n");
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	90 e4       	ldi	r25, 0x40	; 64
 1f0:	0e 94 a7 00 	call	0x14e	; 0x14e <USART3_sendString>
	}
}
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <main>:


	

int main(void)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	c4 56       	subi	r28, 0x64	; 100
 204:	d1 09       	sbc	r29, r1
 206:	cd bf       	out	0x3d, r28	; 61
 208:	de bf       	out	0x3e, r29	; 62
	//uint8_t count = 0;
	char command[MAX_COMMAND_LEN];
	uint8_t index = 0;
	char c;
	
	USART3_init();
 20a:	0e 94 cc 00 	call	0x198	; 0x198 <USART3_init>
	
	static FILE USART_stream = FDEV_SETUP_STREAM(USART3_printChar, NULL, _FDEV_SETUP_WRITE);
	stdout = &USART_stream;
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e4       	ldi	r25, 0x40	; 64
 212:	80 93 6c 40 	sts	0x406C, r24	; 0x80406c <__data_end+0x2>
 216:	90 93 6d 40 	sts	0x406D, r25	; 0x80406d <__data_end+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e0       	ldi	r24, 0x0F	; 15
 21c:	97 e2       	ldi	r25, 0x27	; 39
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 222:	00 c0       	rjmp	.+0      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 224:	00 00       	nop
	
	_delay_ms(10);

	
	USART3_sendString("Type AUTO/MANUAL to control the FANS.\r\n");
 226:	82 e4       	ldi	r24, 0x42	; 66
 228:	90 e4       	ldi	r25, 0x40	; 64
 22a:	0e 94 a7 00 	call	0x14e	; 0x14e <USART3_sendString>
int main(void)
{
	
	//uint8_t count = 0;
	char command[MAX_COMMAND_LEN];
	uint8_t index = 0;
 22e:	10 e0       	ldi	r17, 0x00	; 0
		//_delay_ms(500);
		
		//printf("Counter value is: %d\r\n", count++);
		//_delay_ms(1000);
		
		c = USART3_readChar();
 230:	0e 94 c5 00 	call	0x18a	; 0x18a <USART3_readChar>
	
		if(c != '\n' && c != '\r')
 234:	8a 30       	cpi	r24, 0x0A	; 10
 236:	81 f0       	breq	.+32     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 238:	8d 30       	cpi	r24, 0x0D	; 13
 23a:	71 f0       	breq	.+28     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
		{
			command[index++] = c;
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	91 0f       	add	r25, r17
 240:	e1 e0       	ldi	r30, 0x01	; 1
 242:	f0 e0       	ldi	r31, 0x00	; 0
 244:	ec 0f       	add	r30, r28
 246:	fd 1f       	adc	r31, r29
 248:	e1 0f       	add	r30, r17
 24a:	f1 1d       	adc	r31, r1
 24c:	80 83       	st	Z, r24
			if(index > MAX_COMMAND_LEN)
 24e:	95 36       	cpi	r25, 0x65	; 101
 250:	10 f4       	brcc	.+4      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
		
		c = USART3_readChar();
	
		if(c != '\n' && c != '\r')
		{
			command[index++] = c;
 252:	19 2f       	mov	r17, r25
 254:	01 c0       	rjmp	.+2      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
			if(index > MAX_COMMAND_LEN)
			{
				index = 0;
 256:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		
		if(c == '\r'|| c=='\n')
 258:	8d 30       	cpi	r24, 0x0D	; 13
 25a:	11 f0       	breq	.+4      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	41 f7       	brne	.-48     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
		{
			command[index] = '\0';
 260:	e1 e0       	ldi	r30, 0x01	; 1
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	ec 0f       	add	r30, r28
 266:	fd 1f       	adc	r31, r29
 268:	e1 0f       	add	r30, r17
 26a:	f1 1d       	adc	r31, r1
 26c:	10 82       	st	Z, r1
			index = 0;
			executeCommand(command);
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <executeCommand>
		}
		
		if(c == '\r'|| c=='\n')
		{
			command[index] = '\0';
			index = 0;
 276:	10 e0       	ldi	r17, 0x00	; 0
 278:	db cf       	rjmp	.-74     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>

0000027a <strcmp>:
 27a:	fb 01       	movw	r30, r22
 27c:	dc 01       	movw	r26, r24
 27e:	8d 91       	ld	r24, X+
 280:	01 90       	ld	r0, Z+
 282:	80 19       	sub	r24, r0
 284:	01 10       	cpse	r0, r1
 286:	d9 f3       	breq	.-10     	; 0x27e <strcmp+0x4>
 288:	99 0b       	sbc	r25, r25
 28a:	08 95       	ret

0000028c <puts>:
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	e0 91 6c 40 	lds	r30, 0x406C	; 0x80406c <__data_end+0x2>
 298:	f0 91 6d 40 	lds	r31, 0x406D	; 0x80406d <__data_end+0x3>
 29c:	23 81       	ldd	r18, Z+3	; 0x03
 29e:	21 ff       	sbrs	r18, 1
 2a0:	1b c0       	rjmp	.+54     	; 0x2d8 <puts+0x4c>
 2a2:	8c 01       	movw	r16, r24
 2a4:	d0 e0       	ldi	r29, 0x00	; 0
 2a6:	c0 e0       	ldi	r28, 0x00	; 0
 2a8:	f8 01       	movw	r30, r16
 2aa:	81 91       	ld	r24, Z+
 2ac:	8f 01       	movw	r16, r30
 2ae:	60 91 6c 40 	lds	r22, 0x406C	; 0x80406c <__data_end+0x2>
 2b2:	70 91 6d 40 	lds	r23, 0x406D	; 0x80406d <__data_end+0x3>
 2b6:	db 01       	movw	r26, r22
 2b8:	18 96       	adiw	r26, 0x08	; 8
 2ba:	ed 91       	ld	r30, X+
 2bc:	fc 91       	ld	r31, X
 2be:	19 97       	sbiw	r26, 0x09	; 9
 2c0:	88 23       	and	r24, r24
 2c2:	31 f0       	breq	.+12     	; 0x2d0 <puts+0x44>
 2c4:	09 95       	icall
 2c6:	89 2b       	or	r24, r25
 2c8:	79 f3       	breq	.-34     	; 0x2a8 <puts+0x1c>
 2ca:	df ef       	ldi	r29, 0xFF	; 255
 2cc:	cf ef       	ldi	r28, 0xFF	; 255
 2ce:	ec cf       	rjmp	.-40     	; 0x2a8 <puts+0x1c>
 2d0:	8a e0       	ldi	r24, 0x0A	; 10
 2d2:	09 95       	icall
 2d4:	89 2b       	or	r24, r25
 2d6:	19 f0       	breq	.+6      	; 0x2de <puts+0x52>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <puts+0x56>
 2de:	8d 2f       	mov	r24, r29
 2e0:	9c 2f       	mov	r25, r28
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	1f 91       	pop	r17
 2e8:	0f 91       	pop	r16
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
